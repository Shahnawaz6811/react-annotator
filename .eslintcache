[{"/home/appwrk/Projects/react-annotator/src/reportWebVitals.js":"1","/home/appwrk/Projects/react-annotator/src/Annotator/src/Annotator/index.js":"2","/home/appwrk/Projects/react-annotator/src/Annotator/src/ShortcutsManager/index.js":"3","/home/appwrk/Projects/react-annotator/src/Annotator/src/ImageSelectorSidebarBox/index.js":"4","/home/appwrk/Projects/react-annotator/src/Annotator/src/ImageCanvas/use-mouse.js":"5","/home/appwrk/Projects/react-annotator/src/Workspace/src/LeftSidebar/index.js":"6","/home/appwrk/Projects/react-annotator/src/Annotator/src/ImageMask/index.js":"7","/home/appwrk/Projects/react-annotator/src/Workspace/src/LeftSidebar/ObjectSelector.js":"8","/home/appwrk/Projects/react-annotator/src/Annotator/src/HighlightBox/index.js":"9","/home/appwrk/Projects/react-annotator/src/Annotator/src/Annotator/reducers/history-handler.js":"10","/home/appwrk/Projects/react-annotator/src/Annotator/src/Annotator/reducers/fix-twisted.js":"11","/home/appwrk/Projects/react-annotator/src/Annotator/src/TaskDescriptionSidebarBox/index.js":"12","/home/appwrk/Projects/react-annotator/src/Annotator/src/ImageCanvas/use-wasd-mode.js":"13","/home/appwrk/Projects/react-annotator/src/Workspace/src/Toolbar/index.js":"14","/home/appwrk/Projects/react-annotator/src/Annotator/src/PointDistances/index.js":"15","/home/appwrk/Projects/react-annotator/src/Workspace/src/Toolbar/Slider.js":"16","/home/appwrk/Projects/react-annotator/src/Annotator/src/RegionLabel/styles.js":"17","/home/appwrk/Projects/react-annotator/src/index.js":"18","/home/appwrk/Projects/react-annotator/src/Annotator/src/Annotator/reducers/image-reducer.js":"19","/home/appwrk/Projects/react-annotator/src/Annotator/src/HistorySidebarBox/index.js":"20","/home/appwrk/Projects/react-annotator/src/Annotator/src/RegionTags/index.js":"21","/home/appwrk/Projects/react-annotator/src/Annotator/src/Annotator/reducers/general-reducer.js":"22","/home/appwrk/Projects/react-annotator/src/Annotator/src/Annotator/reducers/combine-reducers.js":"23","/home/appwrk/Projects/react-annotator/src/Annotator/src/RegionSelectAndTransformBoxes/index.js":"24","/home/appwrk/Projects/react-annotator/src/components/Annotator.js":"25","/home/appwrk/Projects/react-annotator/src/Annotator/src/ImageCanvas/index.js":"26","/home/appwrk/Projects/react-annotator/src/App.js":"27","/home/appwrk/Projects/react-annotator/src/Annotator/src/KeyframeTimeline/index.js":"28","/home/appwrk/Projects/react-annotator/src/Annotator/src/VideoOrImageCanvasBackground/index.js":"29","/home/appwrk/Projects/react-annotator/src/Annotator/src/Annotator/reducers/video-reducer.js":"30","/home/appwrk/Projects/react-annotator/src/Annotator/src/RegionSelectorSidebarBox/styles.js":"31","/home/appwrk/Projects/react-annotator/src/components/images.js":"32","/home/appwrk/Projects/react-annotator/src/Annotator/src/TagsSidebarBox/index.js":"33","/home/appwrk/Projects/react-annotator/src/Annotator/src/RegionShapes/index.js":"34"},{"size":362,"mtime":1606820637180,"results":"35","hashOfConfig":"36"},{"size":6413,"mtime":1607931920868,"results":"37","hashOfConfig":"36"},{"size":3626,"mtime":1607695084161,"results":"38","hashOfConfig":"36"},{"size":3908,"mtime":1608108447590,"results":"39","hashOfConfig":"36"},{"size":4753,"mtime":1607695084161,"results":"40","hashOfConfig":"36"},{"size":6240,"mtime":1607695084165,"results":"41","hashOfConfig":"36"},{"size":3293,"mtime":1607695084161,"results":"42","hashOfConfig":"36"},{"size":6678,"mtime":1607695084165,"results":"43","hashOfConfig":"36"},{"size":3476,"mtime":1607695084161,"results":"44","hashOfConfig":"36"},{"size":1572,"mtime":1607695084161,"results":"45","hashOfConfig":"36"},{"size":161,"mtime":1607695084157,"results":"46","hashOfConfig":"36"},{"size":1129,"mtime":1607695084161,"results":"47","hashOfConfig":"36"},{"size":1432,"mtime":1607695084161,"results":"48","hashOfConfig":"36"},{"size":2303,"mtime":1607695084165,"results":"49","hashOfConfig":"36"},{"size":2417,"mtime":1607695084161,"results":"50","hashOfConfig":"36"},{"size":1407,"mtime":1607695084165,"results":"51","hashOfConfig":"36"},{"size":953,"mtime":1607695084161,"results":"52","hashOfConfig":"36"},{"size":457,"mtime":1606820637180,"results":"53","hashOfConfig":"36"},{"size":639,"mtime":1607695084161,"results":"54","hashOfConfig":"36"},{"size":2202,"mtime":1607695084161,"results":"55","hashOfConfig":"36"},{"size":3678,"mtime":1607695084161,"results":"56","hashOfConfig":"36"},{"size":35224,"mtime":1607931920868,"results":"57","hashOfConfig":"36"},{"size":151,"mtime":1607695084157,"results":"58","hashOfConfig":"36"},{"size":7356,"mtime":1607695084161,"results":"59","hashOfConfig":"36"},{"size":712,"mtime":1608107455099,"results":"60","hashOfConfig":"36"},{"size":14578,"mtime":1607931461174,"results":"61","hashOfConfig":"36"},{"size":316,"mtime":1607940361047,"results":"62","hashOfConfig":"36"},{"size":5486,"mtime":1607695084161,"results":"63","hashOfConfig":"36"},{"size":5411,"mtime":1607931461174,"results":"64","hashOfConfig":"36"},{"size":2331,"mtime":1607695084161,"results":"65","hashOfConfig":"36"},{"size":1047,"mtime":1607695084161,"results":"66","hashOfConfig":"36"},{"size":2342,"mtime":1608107270257,"results":"67","hashOfConfig":"36"},{"size":2765,"mtime":1607695084161,"results":"68","hashOfConfig":"36"},{"size":6790,"mtime":1607695084161,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"ln4vrt",{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"76"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"106"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"117"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"76"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"129"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"76"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"106"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/appwrk/Projects/react-annotator/src/reportWebVitals.js",[],["156","157"],"/home/appwrk/Projects/react-annotator/src/Annotator/src/Annotator/index.js",["158","159","160"],"// @flow\n\nimport  React,{ useReducer, useEffect } from \"react\"\nimport type { Node } from \"react\"\nimport MainLayout from \"../MainLayout\"\nimport type {\n  ToolEnum,\n  Image,\n  Mode,\n  MainLayoutState,\n  Action,\n} from \"../MainLayout/types\"\nimport type { KeypointsDefinition } from \"../ImageCanvas/region-tools\"\nimport SettingsProvider from \"../SettingsProvider\"\n\nimport combineReducers from \"./reducers/combine-reducers.js\"\nimport generalReducer from \"./reducers/general-reducer.js\"\nimport imageReducer from \"./reducers/image-reducer.js\"\nimport videoReducer from \"./reducers/video-reducer.js\"\nimport historyHandler from \"./reducers/history-handler.js\"\n\nimport useEventCallback from \"use-event-callback\"\nimport makeImmutable, { without } from \"seamless-immutable\"\n\ntype Props = {\n  taskDescription?: string,\n  allowedArea?: { x: number, y: number, w: number, h: number },\n  regionTagList?: Array<string>,\n  regionClsList?: Array<string>,\n  imageTagList?: Array<string>,\n  imageClsList?: Array<string>,\n  enabledTools?: Array<string>,\n  selectedTool?: String,\n  showTags?: boolean,\n  selectedImage?: string | number,\n  images?: Array<Image>,\n  showPointDistances?: boolean,\n  pointDistancePrecision?: number,\n  RegionEditLabel?: Node,\n  onSubmit: (MainLayoutState) => any,\n  onSave: (Object) => any,\n  videoTime?: number,\n  videoSrc?: string,\n  keyframes?: Object,\n  videoName?: string,\n  keypointDefinitions: KeypointsDefinition,\n  fullImageSegmentationMode?: boolean,\n  autoSegmentationOptions?:\n    | {| type: \"simple\" |}\n    | {| type: \"autoseg\", maxClusters?: number, slicWeightFactor?: number |},\n}\n\nexport const Annotator = ({\n  images,\n  allowedArea,\n  selectedImage = images && images.length > 0 ? 0 : undefined,\n  showPointDistances,\n  pointDistancePrecision,\n  showTags = true,\n  history,\n  enabledTools = [\n    \"pan\",\n    \"zoom-in\",\n    \"polygon\",\n    \"show-mask\",\n    \"free-hand\"\n  ],\n  renderError,\n  selectedTool = \"pan\",\n  jobName=\"\",\n  regionTagList = [],\n  regionClsList = [],\n  imageTagList = [],\n  imageClsList = [],\n  keyframes = {},\n  taskDescription = \"\",\n  fullImageSegmentationMode = false,\n  RegionEditLabel,\n  videoSrc,\n  videoTime = 0,\n  videoName,\n  onSubmit,\n  onSave,\n  useHistory,\n  onNextImage,\n  onPrevImage,\n  keypointDefinitions,\n  autoSegmentationOptions = { type: \"autoseg\" },\n}: Props) => {\n  if (typeof selectedImage === \"string\") {\n    selectedImage = (images || []).findIndex((img) => img.src === selectedImage)\n    if (selectedImage === -1) selectedImage = undefined\n  }\n  const annotationType = images ? \"image\" : \"video\"\n  const [state, dispatchToReducer] = useReducer(\n    historyHandler(\n      combineReducers(\n        annotationType === \"image\" ? imageReducer : videoReducer,\n        generalReducer\n      )\n    ),\n    makeImmutable({\n      annotationType,\n      showTags,\n      jobName,\n      allowedArea,\n      showPointDistances,\n      pointDistancePrecision,\n      selectedTool,\n      fullImageSegmentationMode: fullImageSegmentationMode,\n      autoSegmentationOptions,\n      mode: null,\n      taskDescription,\n      showMask: true,\n      labelImages: imageClsList.length > 0 || imageTagList.length > 0,\n      regionClsList,\n      regionTagList,\n      imageClsList,\n\n      imageTagList,\n      currentVideoTime: videoTime,\n      enabledTools,\n      history,\n      historyCache:{},\n      videoName,\n      keypointDefinitions,\n      ...(annotationType === \"image\"\n        ? {\n            selectedImage,\n            images,\n            selectedImageFrameTime:\n              images && images.length > 0 ? images[0].frameTime : undefined,\n          }\n        : {\n            videoSrc,\n            keyframes,\n          }),\n    })\n  )\n\n  const dispatch = useEventCallback((action: Action) => {\n    if (action.type === \"FOOTER_BUTTON_CLICKED\") {\n      // console.log('Footer');\n      if (action.buttonName === \"submit\") {\n        return onSubmit(without(state, \"history\"))\n      }\n\n     \n      else if (action.buttonName === \"save\") {\n        \n        const image = state.images[state.selectedImage];\n        // console.log(\"Image: \", image)\n        \n        //Create white canvas with original image dimen\n        var canvas = document.createElement(\"canvas\");\n        canvas.width = image.pixelSize.w\n        canvas.height = image.pixelSize.h\n        var ctx = canvas.getContext(\"2d\");\n        ctx.fillStyle = \"white\";\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        // console.log(\"Canvas Dimen\", canvas.width, canvas.height);\n\n\n\n        if (!image.region_data || image.nothingToLabel) {\n          // console.log(\"No data\");\n          //return blank canvas data if image has no regions.\n          return onSave(image,canvas.toDataURL(\"image/png\"))\n        }\n       \n        // Draw image on canvas \n        var img = document.createElement(\"img\");\n        img.setAttribute(\"src\", \"data:image/svg+xml;base64,\" + image.region_data);\n        \n        img.onload = function () {\n          ctx.drawImage(img, 0, 0,canvas.width,canvas.height);\n          // console.log('ImageData', canvas.toDataURL(\"image/png\"))\n          return onSave(image,canvas.toDataURL(\"image/png\"))\n         };\n      }\n        //   return onNextImage(without(state, \"history\"))\n        // }\n      // else if (action.buttonName === \"Next\" && onNextImage) {\n      //   return onNextImage(without(state, \"history\"))\n      // } else if (action.buttonName === \"Prev\" && onPrevImage) {\n      //   return onPrevImage(without(state, \"history\"))\n      // }\n    }\n    dispatchToReducer(action)\n  })\n\n  const onRegionClassAdded = useEventCallback((cls) => {\n    dispatchToReducer({\n      type: \"ON_CLS_ADDED\",\n      cls: cls,\n    })\n  })\n\n  // useEffect(() => {\n  //   if (selectedImage === undefined) return\n  //   dispatchToReducer({\n  //     type: \"SELECT_IMAGE\",\n  //     imageIndex: selectedImage,\n  //     image: state.images[selectedImage],\n  //   })\n  // }, [selectedImage])\n\n  if (!images && !videoSrc)\n    return 'Missing required prop \"images\" or \"videoSrc\"'\n\n  return (\n    <SettingsProvider>\n      <MainLayout\n        RegionEditLabel={RegionEditLabel}\n        alwaysShowNextButton={Boolean(onNextImage)}\n        alwaysShowPrevButton={Boolean(onPrevImage)}\n        state={state}\n        useHistory={useHistory}\n        renderError={renderError}\n        dispatch={dispatch}\n        onRegionClassAdded={onRegionClassAdded}\n      />\n    </SettingsProvider>\n  )\n}\n\nexport default Annotator\n",["161","162"],"/home/appwrk/Projects/react-annotator/src/Annotator/src/ShortcutsManager/index.js",["163"],"import React, { useMemo } from \"react\"\r\nimport { HotKeys } from \"react-hotkeys\"\r\n\r\nexport const defaultHotkeys = [\r\n  {\r\n    id: \"select_tool\",\r\n    description: \"Switch to the Select Tool\",\r\n    binding: \"escape\",\r\n  },\r\n  {\r\n    id: \"zoom_tool\",\r\n    description: \"Select the Zoom Tool\",\r\n    binding: \"z\",\r\n  },\r\n  {\r\n    id: \"create_point\",\r\n    description: \"Create a point\",\r\n  },\r\n  {\r\n    id: \"create_bounding_box\",\r\n    description: \"Create a bounding box\",\r\n    binding: \"b\",\r\n  },\r\n  {\r\n    id: \"pan_tool\",\r\n    description: \"Select the Pan Tool\",\r\n    binding: \"m\",\r\n  },\r\n  {\r\n    id: \"create_polygon\",\r\n    description: \"Create a Polygon\",\r\n    binding: \"p\",\r\n  },\r\n  {\r\n    id: \"create_pixel\",\r\n    description: \"Create a Pixel Mask\",\r\n  },\r\n  {\r\n    id: \"save_and_previous_sample\",\r\n    description: \"Save and go to previous sample\",\r\n    binding: \"ArrowLeft\",\r\n  },\r\n  {\r\n    id: \"save_and_next_sample\",\r\n    description: \"Save and go to next sample\",\r\n    binding: \"ArrowRight\",\r\n  },\r\n  {\r\n    id: \"save_and_exit_sample\",\r\n    description: \"Save and exit current sample\",\r\n  },\r\n  {\r\n    id: \"exit_sample\",\r\n    description: \"Exit sample without saving\",\r\n  },\r\n  {\r\n    id: \"delete_region\",\r\n    description: \"Delete selected region\",\r\n    binding: \"d\",\r\n  },\r\n  {\r\n    id: \"undo\",\r\n    description: \"Undo latest change\",\r\n    binding: \"Ctrl+z\",\r\n  },\r\n]\r\nexport const defaultKeyMap = {}\r\nfor (const { id, binding } of defaultHotkeys) defaultKeyMap[id] = binding\r\n\r\nexport const useDispatchHotkeyHandlers = ({ dispatch }) => {\r\n  const handlers = useMemo(\r\n    () => ({\r\n      select_tool: () => {\r\n        dispatch({\r\n          type: \"SELECT_TOOL\",\r\n          selectedTool: \"select\",\r\n        })\r\n      },\r\n      zoom_tool: () => {\r\n        dispatch({\r\n          type: \"SELECT_TOOL\",\r\n          selectedTool: \"zoom\",\r\n        })\r\n      },\r\n      create_point: () => {\r\n        dispatch({\r\n          type: \"SELECT_TOOL\",\r\n          selectedTool: \"create-point\",\r\n        })\r\n      },\r\n      create_bounding_box: () => {\r\n        dispatch({\r\n          type: \"SELECT_TOOL\",\r\n          selectedTool: \"create-box\",\r\n        })\r\n      },\r\n      pan_tool: () => {\r\n        dispatch({\r\n          type: \"SELECT_TOOL\",\r\n          selectedTool: \"pan\",\r\n        })\r\n      },\r\n      create_polygon: () => {\r\n        dispatch({\r\n          type: \"SELECT_TOOL\",\r\n          selectedTool: \"polygon\",\r\n        })\r\n      },\r\n      create_pixel: () => {\r\n        dispatch({\r\n          type: \"SELECT_TOOL\",\r\n          selectedTool: \"create-pixel\",\r\n        })\r\n      },\r\n      save_and_previous_sample: () => {\r\n        dispatch({\r\n          type: \"FOOTER_BUTTON_CLICKED\",\r\n          buttonName: \"Prev\",\r\n        })\r\n      },\r\n      save_and_next_sample: () => {\r\n        dispatch({\r\n          type: \"FOOTER_BUTTON_CLICKED\",\r\n          buttonName: \"Next\",\r\n        })\r\n      },\r\n      save_and_exit_sample: () => {\r\n        dispatch({\r\n          type: \"FOOTER_BUTTON_CLICKED\",\r\n          buttonName: \"Save\",\r\n        })\r\n      },\r\n      delete_region: () => {\r\n        dispatch({\r\n          type: \"DELETE_SELECTED_REGION\",\r\n        })\r\n      },\r\n      undo: () => {\r\n        dispatch({\r\n          type: \"RESTORE_HISTORY\",\r\n        })\r\n      },\r\n      // TODO\r\n      // exit_sample: () => {\r\n      //   dispatch({\r\n      //     type: \"\",\r\n      //   })\r\n      // }\r\n    }),\r\n    [dispatch]\r\n  )\r\n  return handlers\r\n}\r\n\r\nexport default ({ children, dispatch }) => {\r\n  const handlers = useDispatchHotkeyHandlers({ dispatch })\r\n  return (\r\n    <HotKeys allowChanges handlers={handlers}>\r\n      {children}\r\n    </HotKeys>\r\n  )\r\n}\r\n","/home/appwrk/Projects/react-annotator/src/Annotator/src/ImageSelectorSidebarBox/index.js",["164","165","166","167","168","169","170","171"],"/home/appwrk/Projects/react-annotator/src/Annotator/src/ImageCanvas/use-mouse.js",["172"],"/home/appwrk/Projects/react-annotator/src/Workspace/src/LeftSidebar/index.js",["173","174","175","176","177","178","179","180","181","182","183","184","185"],"/home/appwrk/Projects/react-annotator/src/Annotator/src/ImageMask/index.js",["186","187","188"],"/home/appwrk/Projects/react-annotator/src/Workspace/src/LeftSidebar/ObjectSelector.js",["189","190","191","192","193","194","195","196","197","198","199","200","201","202","203"],"/home/appwrk/Projects/react-annotator/src/Annotator/src/HighlightBox/index.js",[],"/home/appwrk/Projects/react-annotator/src/Annotator/src/Annotator/reducers/history-handler.js",["204","205"],"// @flow\r\n\r\nimport type { MainLayoutState, Action } from \"../../MainLayout/types\"\r\nimport { setIn, updateIn, asMutable, without } from \"seamless-immutable\"\r\nimport moment from \"moment\"\r\n\r\nconst typesToSaveWithHistory = {\r\n  BEGIN_BOX_TRANSFORM: \"Transform/Move Box\",\r\n  BEGIN_MOVE_POINT: \"Move Point\",\r\n  DELETE_REGION: \"Delete Region\",\r\n}\r\n\r\nexport const saveToHistory = (state: MainLayoutState, name: string) =>\r\n  updateIn(state, [\"history\"], (h) =>\r\n    [\r\n      {\r\n        time: moment().toDate(),\r\n        state: without(state, \"history\"),\r\n        name,\r\n      },\r\n    ].concat((h || []).slice(0, 9))\r\n  )\r\n\r\nexport default (reducer) => {\r\n  return (state: MainLayoutState, action: Action) => {\r\n    const prevState = state\r\n    const nextState = reducer(state, action)\r\n\r\n    if (action.type === \"RESTORE_HISTORY\") {\r\n      if (state.history.length > 0) {\r\n        return setIn(\r\n          nextState.history[0].state,\r\n          [\"history\"],\r\n          nextState.history.slice(1)\r\n        )\r\n      }\r\n    } else {\r\n      if (\r\n        prevState !== nextState &&\r\n        Object.keys(typesToSaveWithHistory).includes(action.type)\r\n      ) {\r\n        return setIn(\r\n          nextState,\r\n          [\"history\"],\r\n          [\r\n            {\r\n              time: moment().toDate(),\r\n              state: without(prevState, \"history\"),\r\n              name: typesToSaveWithHistory[action.type] || action.type,\r\n            },\r\n          ]\r\n            .concat(nextState.history || [])\r\n            .slice(0, 9)\r\n        )\r\n      }\r\n    }\r\n\r\n    return nextState\r\n  }\r\n}\r\n",["206","207"],"/home/appwrk/Projects/react-annotator/src/Annotator/src/Annotator/reducers/fix-twisted.js",["208"],"/home/appwrk/Projects/react-annotator/src/Annotator/src/TaskDescriptionSidebarBox/index.js",[],"/home/appwrk/Projects/react-annotator/src/Annotator/src/ImageCanvas/use-wasd-mode.js",["209","210"],"/home/appwrk/Projects/react-annotator/src/Workspace/src/Toolbar/index.js",[],"/home/appwrk/Projects/react-annotator/src/Annotator/src/PointDistances/index.js",[],["211","212"],"/home/appwrk/Projects/react-annotator/src/Workspace/src/Toolbar/Slider.js",["213","214","215","216","217","218","219","220"],"import React from 'react'\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    \r\n  }));\r\n\r\nconst FilterSlider = (props) => {\r\n    const filter = props.activeImage.filter;\r\n\r\n    const classes = useStyles();\r\n\r\n    const getDefaultValue = (label) => {\r\n        if (label == 'brightness') {\r\n            return 100;\r\n        }\r\n        if (label == 'contrast') {\r\n            return 1;\r\n        }\r\n    }\r\n    const getMaxValue = (label) => {\r\n        if (label == 'brightness') {\r\n            return 200;\r\n        }\r\n        if (label == 'contrast') {\r\n            return 10;\r\n        }\r\n    }\r\n    const getMinValue = (label) => {\r\n        if (label == 'brightness') {\r\n            return 10;\r\n        }\r\n        if (label == 'contrast') {\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            \r\n            <input type=\"range\" step={0} min={getMinValue(props.id)} max={getMaxValue(props.id)}\r\n                value={filter ? filter[props.id] : getDefaultValue(props.id)} aria-label={props.id} id={props.id} onChange={props.onChange} defaultValue={getDefaultValue(props.id)} />\r\n            {/* <span>{filter ? filter[props.id] : getDefaultValue(props.id) }</span>            */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FilterSlider\r\n","/home/appwrk/Projects/react-annotator/src/Annotator/src/RegionLabel/styles.js",["221"],"/home/appwrk/Projects/react-annotator/src/index.js",[],"/home/appwrk/Projects/react-annotator/src/Annotator/src/Annotator/reducers/image-reducer.js",["222","223","224","225"],"// @flow\r\n\r\nimport type {\r\n  MainLayoutImageAnnotationState,\r\n  Action,\r\n} from \"../../MainLayout/types\"\r\nimport { setIn } from \"seamless-immutable\"\r\nimport getActiveImage from \"./get-active-image\"\r\n\r\nexport default (state: MainLayoutImageAnnotationState, action: Action) => {\r\n  const { currentImageIndex, pathToActiveImage, activeImage } = getActiveImage(\r\n    state\r\n  )\r\n\r\n  switch (action.type) {\r\n    case \"IMAGE_OR_VIDEO_LOADED\": {\r\n      return setIn(state, [\"images\", currentImageIndex, \"pixelSize\"], {\r\n        w: action.metadata.naturalWidth,\r\n        h: action.metadata.naturalHeight,\r\n      })\r\n    }\r\n  }\r\n  return state\r\n}\r\n",["226","227"],"/home/appwrk/Projects/react-annotator/src/Annotator/src/HistorySidebarBox/index.js",["228","229"],"/home/appwrk/Projects/react-annotator/src/Annotator/src/RegionTags/index.js",["230","231"],"// @flow weak\r\n\r\nimport React from \"react\"\r\nimport Paper from \"@material-ui/core/Paper\"\r\nimport DefaultRegionLabel from \"../RegionLabel\"\r\nimport LockIcon from \"@material-ui/icons/Lock\"\r\n\r\nconst copyWithout = (obj, ...args) => {\r\n  const newObj = { ...obj }\r\n  for (const arg of args) {\r\n    delete newObj[arg]\r\n  }\r\n  return newObj\r\n}\r\n\r\nexport const RegionTags = ({\r\n  regions,\r\n  projectRegionBox,\r\n  mouseEvents,\r\n  regionClsList,\r\n  regionTagList,\r\n  onBeginRegionEdit,\r\n  onChangeRegion,\r\n  onCloseRegionEdit,\r\n  onDeleteRegion,\r\n  layoutParams,\r\n  imageSrc,\r\n  RegionEditLabel,\r\n  onRegionClassAdded,\r\n}) => {\r\n  const RegionLabel =\r\n    RegionEditLabel != null ? RegionEditLabel : DefaultRegionLabel\r\n  return regions\r\n    .filter((r) => r.visible || r.visible === undefined)\r\n    .map((region) => {\r\n      const pbox = projectRegionBox(region)\r\n      const { iw, ih } = layoutParams.current\r\n      let margin = 8\r\n      if (region.highlighted && region.type === \"box\") margin += 6\r\n      const labelBoxHeight =\r\n        region.editingLabels && !region.locked ? 170 : region.tags ? 60 : 50\r\n      const displayOnTop = pbox.y > labelBoxHeight\r\n\r\n      const coords = displayOnTop\r\n        ? {\r\n            left: pbox.x,\r\n            top: pbox.y - margin / 2,\r\n          }\r\n        : { left: pbox.x, top: pbox.y + pbox.h + margin / 2 }\r\n      if (region.locked) {\r\n        return (\r\n          <div\r\n            key={region.id}\r\n            style={{\r\n              position: \"absolute\",\r\n              ...coords,\r\n              zIndex: 10 + (region.editingLabels ? 5 : 0),\r\n            }}\r\n          >\r\n            <Paper\r\n              style={{\r\n                position: \"absolute\",\r\n                left: 0,\r\n                ...(displayOnTop ? { bottom: 0 } : { top: 0 }),\r\n                zIndex: 10,\r\n                backgroundColor: \"#fff\",\r\n                borderRadius: 4,\r\n                padding: 2,\r\n                paddingBottom: 0,\r\n                opacity: 0.5,\r\n                pointerEvents: \"none\",\r\n              }}\r\n            >\r\n              <LockIcon style={{ width: 16, height: 16, color: \"#333\" }} />\r\n            </Paper>\r\n          </div>\r\n        )\r\n      }\r\n      return (\r\n        <div\r\n          key={region.id}\r\n          style={{\r\n            position: \"absolute\",\r\n            ...coords,\r\n            zIndex: 10 + (region.editingLabels ? 5 : 0),\r\n            width: 200,\r\n          }}\r\n          onMouseDown={(e) => e.preventDefault()}\r\n          onMouseUp={(e) => e.preventDefault()}\r\n          onMouseEnter={(e) => {\r\n            if (region.editingLabels) {\r\n              mouseEvents.onMouseUp(e)\r\n              e.button = 1\r\n              mouseEvents.onMouseUp(e)\r\n            }\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              position: \"absolute\",\r\n              zIndex: 20,\r\n              left: 0,\r\n              ...(displayOnTop ? { bottom: 0 } : { top: 0 }),\r\n            }}\r\n            {...(!region.editingLabels\r\n              ? copyWithout(mouseEvents, \"onMouseDown\", \"onMouseUp\")\r\n              : {})}\r\n          >\r\n            <RegionLabel\r\n              allowedClasses={regionClsList}\r\n              allowedTags={regionTagList}\r\n              onOpen={onBeginRegionEdit}\r\n              onChange={onChangeRegion}\r\n              onClose={onCloseRegionEdit}\r\n              onDelete={onDeleteRegion}\r\n              editing={region.editingLabels}\r\n              region={region}\r\n              regions={regions}\r\n              imageSrc={imageSrc}\r\n              onRegionClassAdded={onRegionClassAdded}\r\n            />\r\n          </div>\r\n        </div>\r\n      )\r\n    })\r\n}\r\n\r\nexport default RegionTags\r\n","/home/appwrk/Projects/react-annotator/src/Annotator/src/Annotator/reducers/general-reducer.js",["232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247"],"// @flow\nimport type { MainLayoutState, Action } from \"../../MainLayout/types\"\nimport { moveRegion } from \"../../ImageCanvas/region-tools.js\"\nimport Immutable,{ getIn, setIn, updateIn } from \"seamless-immutable\"\nimport moment from \"moment\"\nimport isEqual from \"lodash/isEqual\"\nimport getActiveImage from \"./get-active-image\"\nimport { saveToHistory } from \"./history-handler.js\"\nimport colors from \"../../colors\"\nimport fixTwisted from \"./fix-twisted\"\nimport convertExpandingLineToPolygon from \"./convert-expanding-line-to-polygon\"\nimport clamp from \"clamp\"\n\nimport getLandmarksWithTransform from \"../../utils/get-landmarks-with-transform\"\n\nconst getRandomId = () => Math.random().toString().split(\".\")[1]\n\nconst generalReducer = (state, action) => {\n  if (\n    state.allowedArea &&\n    state.selectedTool !== \"modify-allowed-area\" &&\n    [\"MOUSE_DOWN\", \"MOUSE_UP\", \"MOUSE_MOVE\"].includes(action.type)\n  ) {\n    const aa = state.allowedArea\n    action.x = clamp(action.x, aa.x, aa.x + aa.w)\n    action.y = clamp(action.y, aa.y, aa.y + aa.h)\n  }\n\n  if (action.type === \"ON_CLS_ADDED\" && action.cls && action.cls !== \"\") {\n    const oldRegionClsList = state.regionClsList\n    const newState = {\n      ...state,\n      regionClsList: oldRegionClsList.concat(action.cls),\n    }\n    return newState\n  }\n\n  // Throttle certain actions\n  if (action.type === \"MOUSE_MOVE\") {\n    if (Date.now() - ((state: any).lastMouseMoveCall || 0) < 16) return state\n    state = setIn(state, [\"lastMouseMoveCall\"], Date.now())\n  }\n  if (!action.type.includes(\"MOUSE\")) {\n    state = setIn(state, [\"lastAction\"], action)\n  }\n\n  const { currentImageIndex, pathToActiveImage, activeImage } = getActiveImage(\n    state\n  )\n\n  const getRegionIndex = (region) => {\n    const regionId =\n      typeof region === \"string\" || typeof region === \"number\"\n        ? region\n        : region.id\n    if (!activeImage) return null\n    const regionIndex = (activeImage.regions || []).findIndex(\n      (r) => r.id === regionId\n    )\n    return regionIndex === -1 ? null : regionIndex\n  }\n  const getRegion = (regionId) => {\n    if (!activeImage) return null\n    const regionIndex = getRegionIndex(regionId)\n    if (regionIndex === null) return [null, null]\n    const region = activeImage.regions[regionIndex]\n    return [region, regionIndex]\n  }\n  const modifyRegion = (regionId, obj) => {\n    const [region, regionIndex] = getRegion(regionId)\n    if (!region) return state\n    if (obj !== null) {\n      return setIn(state, [...pathToActiveImage, \"regions\", regionIndex], {\n        ...region,\n        ...obj,\n      })\n    } else {\n      // delete region\n      const regions = activeImage.regions\n      return setIn(\n        state,\n        [...pathToActiveImage, \"regions\"],\n        (regions || []).filter((r) => r.id !== region.id)\n      )\n    }\n  }\n  const unselectRegions = (state: MainLayoutState) => {\n    if (!activeImage) return state\n    return setIn(\n      state,\n      [...pathToActiveImage, \"regions\"],\n      (activeImage.regions || []).map((r) => ({\n        ...r,\n        highlighted: false,\n      }))\n    )\n  }\n\n  const closeEditors = (state: MainLayoutState) => {\n    if (currentImageIndex === null) return state\n    return setIn(\n      state,\n      [...pathToActiveImage, \"regions\"],\n      (activeImage.regions || []).map((r) => ({\n        ...r,\n        editingLabels: false,\n      }))\n    )\n  }\n\n  const setNewImage = (img: string | Object, index: number) => {\n    let { src, frameTime } = typeof img === \"object\" ? img : { src: img }\n    return setIn(\n      setIn(state, [\"selectedImage\"], index),\n      [\"selectedImageFrameTime\"],\n      frameTime\n    )\n  }\n\n  switch (action.type) {\n    case \"@@INIT\": {\n      return setIn(state, ['initState'], state);\n    }\n    case \"SELECT_IMAGE\": {\n      return setNewImage(action.image, action.imageIndex)\n    }\n    \n    case 'SELECT_LABEL': {\n      // console.log(\"State: \", state);\n      const selectedLabel = action.selectedLabel;\n      // console.log(selectedLabel);\n      return setIn(\n        state,\n        ['images', state.selectedImage, 'label'],selectedLabel\n      )\n    }\n\n    case \"CHANGE_REGION\": {\n      // console.log(\"ActionRegion:\", action.region);\n      const regionIndex = getRegionIndex(action.region)\n      if (regionIndex === null) return state\n      const oldRegion = activeImage.regions[regionIndex]\n      // console.log('OldRegion,', oldRegion);\n      // console.log('NewRegion,', action.region);\n      if (oldRegion.cls !== action.region.cls) {\n        state = saveToHistory(state, \"Change Region Classification\")\n        const clsIndex = state.regionClsList.indexOf(action.region.cls)\n        if (clsIndex !== -1) {\n          action.region.color = colors[clsIndex % colors.length]\n        }\n      }\n      if (!isEqual(oldRegion.tags, action.region.tags)) {\n        state = saveToHistory(state, \"Change Region Tags\")\n      }\n      return setIn(\n        state,\n        [...pathToActiveImage, \"regions\", regionIndex],\n        action.region\n      )\n    }\n\n    case 'SUBMIT': {\n\n      const regionData = getIn(state, [...pathToActiveImage, \"region_data\"])\n\n      return state;\n    }\n\n    case 'IMAGE_LOADED': {\n      const { loading } = action;\n      state = setIn(state, [...pathToActiveImage, \"loading\"], loading)\n      return state;\n    }\n    \n\n    case 'CHANGE_REGION_DATA': {\n      const { regionData, imageDimen } = action.payload;\n     state = setIn(state, [...pathToActiveImage, \"dimen\"], imageDimen)\n       return setIn(state, [...pathToActiveImage, \"region_data\"], regionData)\n      }\n    case \"CHANGE_LABEL\": {\n      const label = action.label;\n      if (!label || activeImage.regions.length === 0) {\n        return state;\n      }\n      \n\n      // Check if image has regions associated to this label\n      const hasRegions = [...(activeImage.regions || [])].find((r) => r.cls === label.cls);\n      if (!hasRegions) {\n        return state;\n      }\n      \n\n      const regions = [...(activeImage.regions || [])].map((r) => {\n        if (r.cls === label.cls) {\n          return ({\n            ...r,\n            visible: label.visible,\n            locked: label.locked\n          })\n        }\n        return r;\n      })\n\n     state = setIn(state, ['regionClsList'], state.regionClsList.map(regionLabel => {\n        if (regionLabel.cls === label.cls) {\n          return ({\n            ...regionLabel,\n            visible: label.visible,\n            locked: label.locked\n\n          })\n        }\n       return regionLabel;\n      }));\n\n\n      return setIn(state, [...pathToActiveImage, \"regions\"], regions)\n\n    }\n    case \"CHANGE_IMAGE\": {\n      if (!activeImage) return state\n      const { delta } = action\n      for (const key of Object.keys(delta)) {\n        if (key === \"cls\") saveToHistory(state, \"Change Image Class\")\n        if (key === \"tags\") saveToHistory(state, \"Change Image Tags\")\n        state = setIn(state, [...pathToActiveImage, key], delta[key])\n      }\n      return state\n    }\n    case \"SELECT_REGION\": {\n      const { region } = action\n      const regionIndex = getRegionIndex(action.region)\n      if (regionIndex === null) return state\n      const regions = [...(activeImage.regions || [])].map((r) => ({\n        ...r,\n        highlighted: r.id === region.id,\n        editingLabels: r.id === region.id,\n      }))\n      return setIn(state, [...pathToActiveImage, \"regions\"], regions)\n    }\n    case \"BEGIN_MOVE_POINT\": {\n      state = closeEditors(state)\n      return setIn(state, [\"mode\"], {\n        mode: \"MOVE_REGION\",\n        regionId: action.point.id,\n      })\n    }\n    case \"BEGIN_BOX_TRANSFORM\": {\n      const { box, directions } = action\n      state = closeEditors(state)\n      if (directions[0] === 0 && directions[1] === 0) {\n        return setIn(state, [\"mode\"], { mode: \"MOVE_REGION\", regionId: box.id })\n      } else {\n        return setIn(state, [\"mode\"], {\n          mode: \"RESIZE_BOX\",\n          regionId: box.id,\n          freedom: directions,\n          original: { x: box.x, y: box.y, w: box.w, h: box.h },\n        })\n      }\n    }\n    case \"BEGIN_MOVE_POLYGON_POINT\": {\n\n      const { polygon, pointIndex } = action\n      // console.log('Pindex: ', polygon);\n\n      state = closeEditors(state)\n      if (\n        state.mode &&\n        state.mode.mode === \"DRAW_POLYGON\" &&\n        pointIndex === 0\n      ) {\n        return setIn(\n          modifyRegion(polygon, {\n            points: polygon.points.slice(0, -1),\n            open: false,\n          }),\n          [\"mode\"],\n          null\n        )\n      }\n      // else {\n      //   state = saveToHistory(state, \"Move Polygon Point\")\n      // }\n      return setIn(state, [\"mode\"], {\n        mode: \"MOVE_POLYGON_POINT\",\n        regionId: polygon.id,\n        pointIndex,\n      })\n    }\n    case \"BEGIN_MOVE_KEYPOINT\": {\n      const { region, keypointId } = action\n      state = closeEditors(state)\n      state = saveToHistory(state, \"Move Keypoint\")\n      return setIn(state, [\"mode\"], {\n        mode: \"MOVE_KEYPOINT\",\n        regionId: region.id,\n        keypointId,\n      })\n    }\n    case \"ADD_POLYGON_POINT\": {\n      const { polygon, point, pointIndex } = action\n      const regionIndex = getRegionIndex(polygon)\n      // console.log(\"regionIndex\", regionIndex);\n      if (regionIndex === null) return state\n      const points = [...polygon.points]\n      points.splice(pointIndex, 0, point)\n      return setIn(state, [...pathToActiveImage, \"regions\", regionIndex], {\n        ...polygon,\n        points,\n      })\n    }\n    case \"MOUSE_MOVE\": {\n      const { x, y } = action\n\n      if (!state.mode) return state\n      if (!activeImage) return state\n      const { mouseDownAt } = state\n      switch (state.mode.mode) {\n        case \"MOVE_POLYGON_POINT\": {\n          const { pointIndex, regionId } = state.mode\n          const regionIndex = getRegionIndex(regionId)\n          if (regionIndex === null) return state\n          return setIn(\n            state,\n            [\n              ...pathToActiveImage,\n              \"regions\",\n              regionIndex,\n              \"points\",\n              pointIndex,\n            ],\n            [x, y]\n          )\n        }\n        case \"MOVE_KEYPOINT\": {\n          const { keypointId, regionId } = state.mode\n          const [region, regionIndex] = getRegion(regionId)\n          if (regionIndex === null) return state\n          return setIn(\n            state,\n            [\n              ...pathToActiveImage,\n              \"regions\",\n              regionIndex,\n              \"points\",\n              keypointId,\n            ],\n            { ...(region: any).points[keypointId], x, y }\n          )\n        }\n        case \"MOVE_REGION\": {\n          const { regionId } = state.mode\n          if (regionId === \"$$allowed_area\") {\n            const {\n              allowedArea: { w, h },\n            } = state\n            return setIn(state, [\"allowedArea\"], {\n              x: x - w / 2,\n              y: y - h / 2,\n              w,\n              h,\n            })\n          }\n          const regionIndex = getRegionIndex(regionId)\n          if (regionIndex === null) return state\n          return setIn(\n            state,\n            [...pathToActiveImage, \"regions\", regionIndex],\n            moveRegion(activeImage.regions[regionIndex], x, y)\n          )\n        }\n        case \"RESIZE_BOX\": {\n          const {\n            regionId,\n            freedom: [xFree, yFree],\n            original: { x: ox, y: oy, w: ow, h: oh },\n          } = state.mode\n\n          const dx = xFree === 0 ? ox : xFree === -1 ? Math.min(ox + ow, x) : ox\n          const dw =\n            xFree === 0\n              ? ow\n              : xFree === -1\n              ? ow + (ox - dx)\n              : Math.max(0, ow + (x - ox - ow))\n          const dy = yFree === 0 ? oy : yFree === -1 ? Math.min(oy + oh, y) : oy\n          const dh =\n            yFree === 0\n              ? oh\n              : yFree === -1\n              ? oh + (oy - dy)\n              : Math.max(0, oh + (y - oy - oh))\n\n          // determine if we should switch the freedom\n          if (dw <= 0.001) {\n            state = setIn(state, [\"mode\", \"freedom\"], [xFree * -1, yFree])\n          }\n          if (dh <= 0.001) {\n            state = setIn(state, [\"mode\", \"freedom\"], [xFree, yFree * -1])\n          }\n\n          if (regionId === \"$$allowed_area\") {\n            return setIn(state, [\"allowedArea\"], {\n              x: dx,\n              w: dw,\n              y: dy,\n              h: dh,\n            })\n          }\n\n          const regionIndex = getRegionIndex(regionId)\n          if (regionIndex === null) return state\n          const box = activeImage.regions[regionIndex]\n\n          return setIn(state, [...pathToActiveImage, \"regions\", regionIndex], {\n            ...box,\n            x: dx,\n            w: dw,\n            y: dy,\n            h: dh,\n          })\n        }\n        case \"RESIZE_KEYPOINTS\": {\n          const { regionId, landmarks, centerX, centerY } = state.mode\n          const distFromCenter = Math.sqrt(\n            (centerX - x) ** 2 + (centerY - y) ** 2\n          )\n          const scale = distFromCenter / 0.15\n          return modifyRegion(regionId, {\n            points: getLandmarksWithTransform({\n              landmarks,\n              center: { x: centerX, y: centerY },\n              scale,\n            }),\n          })\n        }\n        case \"DRAW_POLYGON\": {\n          // console.log('Draw pol')\n          const { regionId } = state.mode\n          const [region, regionIndex] = getRegion(regionId)\n          if (!region) return setIn(state, [\"mode\"], null)\n          return setIn(\n            state,\n            [\n              ...pathToActiveImage,\n              \"regions\",\n              regionIndex,\n              \"points\",\n              (region: any).points.length - 1,\n            ],\n            [x, y]\n          )\n        }\n        case \"DRAW_EXPANDING_LINE\": {\n          const { regionId } = state.mode\n          const [expandingLine, regionIndex] = getRegion(regionId)\n          if (!expandingLine) return state\n          const isMouseDown = Boolean(state.mouseDownAt)\n          if (isMouseDown) {\n            // If the mouse is down, set width/angle\n            const lastPoint = expandingLine.points.slice(-1)[0]\n            const mouseDistFromLastPoint = Math.sqrt(\n              (lastPoint.x - x) ** 2 + (lastPoint.y - y) ** 2\n            )\n            if (mouseDistFromLastPoint < 0.002 && !lastPoint.width) return state\n\n            const newState = setIn(\n              state,\n              [...pathToActiveImage, \"regions\", regionIndex, \"points\"],\n              expandingLine.points.slice(0, -1).concat([\n                {\n                  ...lastPoint,\n                  width: mouseDistFromLastPoint * 2,\n                  angle: Math.atan2(lastPoint.x - x, lastPoint.y - y),\n                },\n              ])\n            )\n            return newState\n          } else {\n            // If mouse is up, move the next candidate point\n            return setIn(\n              state,\n              [...pathToActiveImage, \"regions\", regionIndex],\n              {\n                ...expandingLine,\n                candidatePoint: { x, y },\n              }\n            )\n          }\n\n          return state\n        }\n        case \"SET_EXPANDING_LINE_WIDTH\": {\n          const { regionId } = state.mode\n          const [expandingLine, regionIndex] = getRegion(regionId)\n          if (!expandingLine) return state\n          const lastPoint = expandingLine.points.slice(-1)[0]\n          const { mouseDownAt } = state\n          return setIn(\n            state,\n            [...pathToActiveImage, \"regions\", regionIndex, \"expandingWidth\"],\n            Math.sqrt((lastPoint.x - x) ** 2 + (lastPoint.y - y) ** 2)\n          )\n        }\n        default:\n          return state\n      }\n    }\n    case \"MOUSE_DOWN\": {\n      if (!activeImage) return state\n      const { x, y } = action\n\n\n      state = setIn(state, [\"mouseDownAt\"], { x, y })\n      \n      if (state.mode) {\n        switch (state.mode.mode) {\n          case \"DRAW_POLYGON\": {\n            const [polygon, regionIndex] = getRegion(state.mode.regionId)\n            if (!polygon) break\n            return setIn(\n              state,\n              [...pathToActiveImage, \"regions\", regionIndex],\n              { ...polygon, points: polygon.points.concat([[x, y]]) }\n            )\n          }\n          case \"DRAW_EXPANDING_LINE\": {\n            const [expandingLine, regionIndex] = getRegion(state.mode.regionId)\n            if (!expandingLine) break\n            const lastPoint = expandingLine.points.slice(-1)[0]\n            if (\n              expandingLine.points.length > 1 &&\n              Math.sqrt((lastPoint.x - x) ** 2 + (lastPoint.y - y) ** 2) < 0.002\n            ) {\n              if (!lastPoint.width) {\n                return setIn(state, [\"mode\"], {\n                  mode: \"SET_EXPANDING_LINE_WIDTH\",\n                  regionId: state.mode.regionId,\n                })\n              } else {\n                return state\n                  .setIn(\n                    [...pathToActiveImage, \"regions\", regionIndex],\n                    convertExpandingLineToPolygon(expandingLine)\n                  )\n                  .setIn([\"mode\"], null)\n              }\n            }\n\n            // Create new point\n            return setIn(\n              state,\n              [...pathToActiveImage, \"regions\", regionIndex, \"points\"],\n              expandingLine.points.concat([{ x, y, angle: null, width: null }])\n            )\n          }\n          case \"SET_EXPANDING_LINE_WIDTH\": {\n            const [expandingLine, regionIndex] = getRegion(state.mode.regionId)\n            if (!expandingLine) break\n            const { expandingWidth } = expandingLine\n            return state\n              .setIn(\n                [...pathToActiveImage, \"regions\", regionIndex],\n                convertExpandingLineToPolygon({\n                  ...expandingLine,\n                  points: expandingLine.points.map((p) =>\n                    p.width ? p : { ...p, width: expandingWidth }\n                  ),\n                  expandingWidth: undefined,\n                })\n              )\n              .setIn([\"mode\"], null)\n          }\n          default:\n            break\n        }\n      }\n\n      let newRegion\n      if (!activeImage.label) {\n        return state;\n      }\n      let defaultRegionCls = activeImage.label.cls,\n        defaultRegionColor = activeImage.label.color\n      // if (activeImage && (activeImage.regions || []).length > 0) {\n      //   defaultRegionCls = activeImage.regions.slice(-1)[0].cls\n      //   const clsIndex = (state.regionClsList || []).indexOf(defaultRegionCls)\n      //   if (clsIndex !== -1) {\n      //     defaultRegionColor = colors[clsIndex % colors.length]\n      //   }\n      // }\n\n      switch (state.selectedTool) {\n        case \"create-point\": {\n          state = saveToHistory(state, \"Create Point\")\n          newRegion = {\n            type: \"point\",\n            x,\n            y,\n            highlighted: true,\n            editingLabels: true,\n            color: defaultRegionColor,\n            id: getRandomId(),\n            cls: defaultRegionCls,\n          }\n          break\n        }\n        case \"create-box\": {\n          state = saveToHistory(state, \"Create Box\")\n          newRegion = {\n            type: \"box\",\n            x: x,\n            y: y,\n            w: 0,\n            h: 0,\n            highlighted: true,\n            editingLabels: false,\n            color: defaultRegionColor,\n            cls: defaultRegionCls,\n            id: getRandomId(),\n          }\n          state = setIn(state, [\"mode\"], {\n            mode: \"RESIZE_BOX\",\n            editLabelEditorAfter: true,\n            regionId: newRegion.id,\n            freedom: [1, 1],\n            original: { x, y, w: newRegion.w, h: newRegion.h },\n            isNew: true,\n          })\n          break\n        }\n        case \"polygon\": {\n\n          if (state.mode && state.mode.mode === \"DRAW_POLYGON\") break\n          state = saveToHistory(state, \"Create Polygon\")\n          newRegion = {\n            type: \"polygon\",\n            points: [\n              [x, y],\n              [x, y],\n            ],\n            open: true,\n            highlighted: true,\n            color: defaultRegionColor,\n            cls: defaultRegionCls,\n            id: getRandomId(),\n          }\n          state = setIn(state, [\"mode\"], {\n            mode: \"DRAW_POLYGON\",\n            regionId: newRegion.id,\n          })\n          break\n        }\n        case \"create-expanding-line\": {\n          state = saveToHistory(state, \"Create Expanding Line\")\n          newRegion = {\n            type: \"expanding-line\",\n            unfinished: true,\n            points: [{ x, y, angle: null, width: null }],\n            open: true,\n            highlighted: true,\n            color: defaultRegionColor,\n            cls: defaultRegionCls,\n            id: getRandomId(),\n          }\n          state = setIn(state, [\"mode\"], {\n            mode: \"DRAW_EXPANDING_LINE\",\n            regionId: newRegion.id,\n          })\n          break\n        }\n        case \"create-keypoints\": {\n          state = saveToHistory(state, \"Create Keypoints\")\n          const [\n            [keypointsDefinitionId, { landmarks, connections }],\n          ] = (Object.entries(state.keypointDefinitions): any)\n\n          newRegion = {\n            type: \"keypoints\",\n            keypointsDefinitionId,\n            points: getLandmarksWithTransform({\n              landmarks,\n              center: { x, y },\n              scale: 1,\n            }),\n            highlighted: true,\n            editingLabels: false,\n            id: getRandomId(),\n          }\n          state = setIn(state, [\"mode\"], {\n            mode: \"RESIZE_KEYPOINTS\",\n            landmarks,\n            centerX: x,\n            centerY: y,\n            regionId: newRegion.id,\n            isNew: true,\n          })\n          break\n        }\n        default:\n          break\n      }\n\n      const regions = [...(getIn(state, pathToActiveImage).regions || [])]\n        .map((r) =>\n          setIn(r, [\"editingLabels\"], false).setIn([\"highlighted\"], false)\n        )\n        .concat(newRegion ? [newRegion] : [])\n\n      return setIn(state, [...pathToActiveImage, \"regions\"], regions)\n    }\n    case \"MOUSE_UP\": {\n      const { x, y } = action\n\n      const { mouseDownAt = { x, y } } = state\n      if (!state.mode) return state\n      state = setIn(state, [\"mouseDownAt\"], null)\n      switch (state.mode.mode) {\n        case \"RESIZE_BOX\": {\n          if (state.mode.isNew) {\n            if (\n              Math.abs(state.mode.original.x - x) < 0.002 ||\n              Math.abs(state.mode.original.y - y) < 0.002\n            ) {\n              return setIn(\n                modifyRegion(state.mode.regionId, null),\n                [\"mode\"],\n                null\n              )\n            }\n          }\n          if (state.mode.editLabelEditorAfter) {\n            return {\n              ...modifyRegion(state.mode.regionId, { editingLabels: true }),\n              mode: null,\n            }\n          }\n        }\n        case \"MOVE_REGION\":\n        case \"RESIZE_KEYPOINTS\":\n        case \"MOVE_POLYGON_POINT\": {\n          // console.log(\"Moveee\")\n          return { ...state, mode: null }\n        }\n        case \"MOVE_KEYPOINT\": {\n          return { ...state, mode: null }\n        }\n        case \"CREATE_POINT_LINE\": {\n          return state\n        }\n        case \"DRAW_EXPANDING_LINE\": {\n          // console.log(\"Drawinggg\");\n          const [expandingLine, regionIndex] = getRegion(state.mode.regionId)\n          if (!expandingLine) return state\n          let newExpandingLine = expandingLine\n          const lastPoint =\n            expandingLine.points.length !== 0\n              ? expandingLine.points.slice(-1)[0]\n              : mouseDownAt\n          let jointStart\n          if (expandingLine.points.length > 1) {\n            jointStart = expandingLine.points.slice(-2)[0]\n          } else {\n            jointStart = lastPoint\n          }\n          const mouseDistFromLastPoint = Math.sqrt(\n            (lastPoint.x - x) ** 2 + (lastPoint.y - y) ** 2\n          )\n          if (mouseDistFromLastPoint > 0.002) {\n            // The user is drawing has drawn the width for the last point\n            const newPoints = [...expandingLine.points]\n            for (let i = 0; i < newPoints.length - 1; i++) {\n              if (newPoints[i].width) continue\n              newPoints[i] = {\n                ...newPoints[i],\n                width: lastPoint.width,\n              }\n            }\n            newExpandingLine = setIn(\n              expandingLine,\n              [\"points\"],\n              fixTwisted(newPoints)\n            )\n          } else {\n            return state\n          }\n          return setIn(\n            state,\n            [...pathToActiveImage, \"regions\", regionIndex],\n            newExpandingLine\n          )\n        }\n        default:\n          return state\n      }\n    }\n\n    case \"UPDATE_IMAGE_CANVAS\": {\n      return setNewImage(\n        state.images[action.payload.position],\n        action.payload.position\n      )\n    }\n\n    case \"OPEN_REGION_EDITOR\": {\n      const { region } = action\n      const regionIndex = getRegionIndex(action.region)\n      if (regionIndex === null) return state\n      const newRegions = setIn(\n        activeImage.regions.map((r) => ({\n          ...r,\n          highlighted: false,\n          editingLabels: false,\n        })),\n        [regionIndex],\n        {\n          ...(activeImage.regions || [])[regionIndex],\n          highlighted: true,\n          editingLabels: true,\n        }\n      )\n      return setIn(state, [...pathToActiveImage, \"regions\"], newRegions)\n    }\n    case \"CLOSE_REGION_EDITOR\": {\n      const { region } = action\n      const regionIndex = getRegionIndex(action.region)\n      if (regionIndex === null) return state\n      return setIn(state, [...pathToActiveImage, \"regions\", regionIndex], {\n        ...(activeImage.regions || [])[regionIndex],\n        editingLabels: false,\n      })\n    }\n      \n    case 'CLICK_LABEL': {\n      const label = state.images[currentImageIndex].label;\n      return setIn(\n        state,\n        [\"images\", currentImageIndex, \"label\"],\n        !label\n      )\n    }\n    case \"DELETE_REGION\": {\n      const regionIndex = getRegionIndex(action.region)\n      if (regionIndex === null) return state\n      const region = action.region;\n\n\n      state =  setIn(\n        state,\n        [...pathToActiveImage, \"regions\"],\n        (activeImage.regions || []).filter((r) => r.id !== action.region.id)\n      )\n\n      let historyCacheForActiveImage = getIn(state, ['historyCache', activeImage.name]);\n      if (historyCacheForActiveImage) {\n        historyCacheForActiveImage = Immutable.asMutable(historyCacheForActiveImage);\n        historyCacheForActiveImage.push(region)\n      } else {\n        historyCacheForActiveImage = [];\n        historyCacheForActiveImage.push(region)\n      }\n      return setIn(state, ['historyCache', activeImage.name], historyCacheForActiveImage);\n\n    }\n    case \"DELETE_SELECTED_REGION\": {\n      return setIn(\n        state,\n        [...pathToActiveImage, \"regions\"],\n        (activeImage.regions || []).filter((r) => !r.highlighted)\n      )\n    }\n    case \"FOOTER_BUTTON_CLICKED\": {\n      const buttonName = action.buttonName.toLowerCase()\n      switch (buttonName) {\n        case \"undo\": {\n          \n          // console.log(\"Original State: \", state);\n          // Check if current image has active regions to undo\n          if (activeImage.regions && activeImage.regions.length > 0) {\n\n            // get last region inserted to active image\n           let lastRegionAddedToActiveImage = getIn(state,\n            [...pathToActiveImage, \"regions\",activeImage.regions.length - 1])\n         \n\n            //Remove last region inserted to active image\n            state = \n            setIn(state,[...pathToActiveImage, \"regions\"], activeImage.regions.filter((element, index) => index < activeImage.regions.length - 1)) \n            \n             // Cache last active image region to historyCache\n            let historyCacheForActiveImage = getIn(state, ['historyCache', activeImage.name]);\n            if (historyCacheForActiveImage) {\n              historyCacheForActiveImage = Immutable.asMutable(historyCacheForActiveImage);\n              historyCacheForActiveImage.push(lastRegionAddedToActiveImage)\n            } else {\n              historyCacheForActiveImage = [];\n              historyCacheForActiveImage.push(lastRegionAddedToActiveImage)\n            }\n            state =  setIn(state, ['historyCache', activeImage.name], historyCacheForActiveImage);\n        \n          }\n          return state;\n        }\n        case \"redo\": {\n\n          // Check if we have regions in cache  to redo\n          if (state.historyCache && state.historyCache[activeImage.name] && state.historyCache[activeImage.name].length > 0) {\n            \n            // get last item inserted to history cache\n            // let lastRegionAddedToCache = getIn(state,\n            //   [\"historyCache\", state.historyCache.length - 1]);\n            let lastRegionAddedToCache = state.historyCache[activeImage.name][state.historyCache[activeImage.name].length - 1];\n\n            // remove last item from history cache.\n            state = \n              setIn(state, ['historyCache', activeImage.name], state.historyCache[activeImage.name].filter((element, index) => index < state.historyCache[activeImage.name].length - 1))\n\n\n            // console.log(\"lastRegionAddedToCache\", lastRegionAddedToCache)\n            // redo active image regions with last item popped from history cache\n            state = \n            setIn(state,[...pathToActiveImage, \"regions\",activeImage.regions.length],  lastRegionAddedToCache)\n            // return state.historyCache[0];\n            // console.log(\"After redoing regions \", state);\n           \n          }\n          return state;\n          \n        }\n        case 'reset': {\n          // console.log('Before reset: ', state);\n          if (activeImage.regions && activeImage.regions.length > 0) {\n            let historyCacheForActiveImage = getIn(state, ['historyCache', activeImage.name]);\n            if (historyCacheForActiveImage && historyCacheForActiveImage.length > 0) {\n             // clear history cache for current image.\n            state = \n              setIn(state,['historyCache',activeImage.name], [])\n            }\n            state = \n              setIn(state,['historyCache',activeImage.name], activeImage.regions)\n\n            state = \n              setIn(state,\n                [...pathToActiveImage, \"regions\"],\n                [])\n          }\n          \n            // state = setIn(state.history[state.history.length - 1].state, ['history'], []);\n            // console.log(\"After reset\", state);\n          \n      \n          return state;\n        }\n        case \"prev\": {\n          if (currentImageIndex === null) return state\n          if (currentImageIndex === 0) return state\n          return setNewImage(\n            state.images[currentImageIndex - 1],\n            currentImageIndex - 1\n          )\n        }\n        case \"next\": {\n          if (currentImageIndex === null) return state\n          if (currentImageIndex === state.images.length - 1) return state\n          return setNewImage(\n            state.images[currentImageIndex + 1],\n            currentImageIndex + 1\n          )\n        }\n\n        case \"save\": {\n          return state\n        }\n\n        case 'nolabel': {\n          const nothingToLabel = state.images[currentImageIndex].nothingToLabel;\n      return setIn(\n        state,\n        [\"images\", currentImageIndex, \"nothingToLabel\"],\n        !nothingToLabel\n      )\n        }\n        \n        case \"clone\": {\n          if (currentImageIndex === null) return state\n          if (currentImageIndex === state.images.length - 1) return state\n          return setIn(\n            setNewImage(\n              state.images[currentImageIndex + 1],\n              currentImageIndex + 1\n            ),\n            [\"images\", currentImageIndex + 1, \"regions\"],\n            activeImage.regions\n          )\n        }\n        case \"settings\": {\n          return setIn(state, [\"settingsOpen\"], !state.settingsOpen)\n        }\n        case \"help\": {\n          return state\n        }\n        case \"fullscreen\": {\n          return setIn(state, [\"fullScreen\"], true)\n        }\n        case \"exit fullscreen\":\n        case \"window\": {\n          return setIn(state, [\"fullScreen\"], false)\n        }\n        case \"hotkeys\": {\n          return state\n        }\n        case \"exit\":\n        case \"done\": {\n          return state\n        }\n        default:\n          return state\n      }\n      break;\n    }\n   \n    case \"UPDATE_FILTER\": {\n        \n      // return setIn(state, [\"zoomOut\"], !state.zoomOut)\n      // console.log('Action:',action.payload.value);\n      let filter = getIn( state,\n        [...pathToActiveImage, \"filter\"])\n        if(!filter){\n          filter = {};\n          // filter['brightness'] = action.payload.value;\n       }\n      //  console.log('Payliad: ',filter);\n\n      const newState =  setIn(\n        state,\n        [...pathToActiveImage, \"filter\"],\n        {...filter,[action.payload.name]: action.payload.value}\n      )\n\n      return newState;\n        \n    }\n    case \"SELECT_TOOL\": {\n      state = setIn(state, [\"selectedTool\"], action.selectedTool)\n      if(action.selectedTool === 'inverse') {\n       let filter = getIn( state,\n        [...pathToActiveImage, \"filter\"])\n       if(!filter){\n         filter = {};\n         filter.inverse = 0;\n       }\n      state =  setIn(\n        state,\n        [...pathToActiveImage, \"filter\"],\n        {...filter,inverse: filter.inverse == 0 ? 100:0}\n      )      \n      }\n    \n       if (action.selectedTool === \"zoom-in\") {\n        state =  setIn(state, [\"zoomOut\"], !state.zoomOut)\n      }\n      if (action.selectedTool === \"modify-allowed-area\" && !state.allowedArea) {\n        state = setIn(state, [\"allowedArea\"], { x: 0, y: 0, w: 1, h: 1 })\n      }\n      return setIn(state, [\"mode\"], null)\n    }\n    case \"CANCEL\": {\n      const { mode } = state\n      if (mode) {\n        switch (mode.mode) {\n          case \"DRAW_EXPANDING_LINE\":\n          case \"SET_EXPANDING_LINE_WIDTH\":\n          case \"DRAW_POLYGON\": {\n            const { regionId } = mode\n            return modifyRegion(regionId, null)\n          }\n          case \"MOVE_POLYGON_POINT\":\n          case \"RESIZE_BOX\":\n          case \"MOVE_REGION\": {\n            return setIn(state, [\"mode\"], null)\n          }\n          default:\n            return state\n        }\n      }\n      // Close any open boxes\n      const regions: any = activeImage.regions\n      if (regions && regions.some((r) => r.editingLabels)) {\n        return setIn(\n          state,\n          [...pathToActiveImage, \"regions\"],\n          regions.map((r) => ({\n            ...r,\n            editingLabels: false,\n          }))\n        )\n      } else if (regions) {\n        return setIn(\n          state,\n          [...pathToActiveImage, \"regions\"],\n          regions.map((r) => ({\n            ...r,\n            highlighted: false,\n          }))\n        )\n      }\n      break\n    }\n    default:\n      break\n  }\n  return state\n}\n\n\nexport default generalReducer;","/home/appwrk/Projects/react-annotator/src/Annotator/src/Annotator/reducers/combine-reducers.js",["248"],"export default (...reducers) => (state, action) => {\r\n  for (const reducer of reducers) {\r\n    state = reducer(state, action)\r\n  }\r\n  return state\r\n}\r\n",["249","250"],"/home/appwrk/Projects/react-annotator/src/Annotator/src/RegionSelectAndTransformBoxes/index.js",[],["251","252"],"/home/appwrk/Projects/react-annotator/src/components/Annotator.js",["253","254"],"import React from 'react'\n// import Annotator from '@rediminds/image-video-annotator'\nimport Annotator from '../Annotator/src/Annotator'; \nimport { images, labels } from './images'\nimport { Route, useHistory, useParams } from 'react-router-dom';\n\nconst AppAnnotator = (props) => {\n    const history = useHistory();\n\n    return (\n        <div>\n            <Annotator images={images}\n                regionClsList={labels}\n                jobName=\"Dr-John-De\"\n                renderError={(error) => {}}\n                useHistory={()=> history}\n                onSave={(selectedImage, encodedData) => {}}\n                onSubmit={(state) => {}} \n            />\n        </div>\n    )\n}\n\nexport default AppAnnotator","/home/appwrk/Projects/react-annotator/src/Annotator/src/ImageCanvas/index.js",["255","256","257","258","259","260","261","262","263","264"],"/home/appwrk/Projects/react-annotator/src/App.js",[],"/home/appwrk/Projects/react-annotator/src/Annotator/src/KeyframeTimeline/index.js",["265","266","267"],"// @flow weak\r\n\r\nimport React, { useMemo, useState, useEffect } from \"react\"\r\nimport { styled } from \"@material-ui/core/styles\"\r\nimport range from \"lodash/range\"\r\nimport * as colors from \"@material-ui/core/colors\"\r\nimport useMeasure from \"react-use-measure\"\r\nimport useEventCallback from \"use-event-callback\"\r\nimport { useRafState } from \"react-use\"\r\nimport getTimeString from \"./get-time-string\"\r\n\r\nconst Container = styled(\"div\")({\r\n  position: \"relative\",\r\n  display: \"flex\",\r\n  flexGrow: 1,\r\n  minWidth: 240,\r\n  height: 64,\r\n  marginLeft: 16,\r\n  marginRight: 16,\r\n})\r\n\r\nconst Tick = styled(\"div\")({\r\n  position: \"absolute\",\r\n  width: 2,\r\n  marginLeft: -1,\r\n  height: \"100%\",\r\n  backgroundColor: colors.grey[300],\r\n  bottom: 0,\r\n})\r\nconst TickText = styled(\"div\")({\r\n  position: \"absolute\",\r\n  userSelect: \"none\",\r\n  fontSize: 10,\r\n  color: colors.grey[600],\r\n  fontWeight: \"bold\",\r\n  bottom: 0,\r\n})\r\n\r\nconst PositionCursor = styled(\"div\")({\r\n  position: \"absolute\",\r\n  bottom: \"calc(50% + 6px)\",\r\n  fontSize: 10,\r\n  fontWeight: \"bold\",\r\n  color: \"#fff\",\r\n  display: \"grid\",\r\n  placeItems: \"center\",\r\n  width: 48,\r\n  marginLeft: -24,\r\n  borderRadius: 2,\r\n  height: 24,\r\n  backgroundColor: colors.blue[500],\r\n  userSelect: \"none\",\r\n  fontVariantNumeric: \"tabular-nums\",\r\n\r\n  \"&::before\": {\r\n    position: \"absolute\",\r\n    bottom: -6,\r\n    left: 24 - 8,\r\n    content: '\"\"',\r\n    width: 0,\r\n    height: 0,\r\n    borderTop: `8px solid ${colors.blue[500]}`,\r\n    borderLeft: \"8px solid transparent\",\r\n    borderRight: \"8px solid transparent\",\r\n  },\r\n})\r\n\r\nconst KeyframeMarker = styled(\"div\")({\r\n  position: \"absolute\",\r\n  bottom: 8,\r\n  cursor: \"pointer\",\r\n  opacity: 0.75,\r\n  fontSize: 10,\r\n  fontWeight: \"bold\",\r\n  color: \"#fff\",\r\n  display: \"grid\",\r\n  placeItems: \"center\",\r\n  width: 16,\r\n  marginLeft: 0,\r\n  borderTopLeftRadius: 2,\r\n  borderTopRightRadius: 2,\r\n  height: 12,\r\n  marginLeft: -8,\r\n  backgroundColor: colors.red[500],\r\n  userSelect: \"none\",\r\n  fontVariantNumeric: \"tabular-nums\",\r\n\r\n  \"&::before\": {\r\n    position: \"absolute\",\r\n    bottom: -8,\r\n    left: 0,\r\n    content: '\"\"',\r\n    width: 0,\r\n    height: 0,\r\n    borderTop: `8px solid ${colors.red[500]}`,\r\n    borderLeft: \"8px solid transparent\",\r\n    borderRight: \"8px solid transparent\",\r\n  },\r\n})\r\n\r\nconst min = 60000\r\nconst displayIntervalPairs = [\r\n  [50, 250],\r\n  [100, 500],\r\n  [250, 1000],\r\n  [1000, 5000],\r\n  [5000, 30000],\r\n  [10000, min],\r\n  [30000, min * 2],\r\n  [min, min * 5],\r\n  [min * 5, min * 30],\r\n  [min * 10, min * 60],\r\n  [min * 30, min * 60 * 3],\r\n  [min * 60, min * 60 * 5],\r\n]\r\n\r\nconst getMajorInterval = (duration) => {\r\n  for (const [minor, major] of displayIntervalPairs) {\r\n    if (duration / major < 6 && duration / major > 2) {\r\n      return [minor, major]\r\n    }\r\n  }\r\n  return [duration / 4, duration]\r\n}\r\n\r\nexport default ({\r\n  currentTime = 0,\r\n  duration,\r\n  onChangeCurrentTime,\r\n  keyframes,\r\n}) => {\r\n  const [ref, bounds] = useMeasure()\r\n  const [instantCurrentTime, changeInstantCurrentTime] = useState(currentTime)\r\n  const [draggingTime, changeDraggingTime] = useRafState(false)\r\n  const keyframeTimes = Object.keys(keyframes || {})\r\n    .map((t) => parseInt(t))\r\n    .filter((t) => !isNaN(t))\r\n    .sort((a, b) => a - b)\r\n\r\n  useEffect(() => {\r\n    if (currentTime !== instantCurrentTime) {\r\n      changeInstantCurrentTime(currentTime)\r\n    }\r\n  }, [currentTime])\r\n\r\n  const [minorInterval, majorInterval] = useMemo(\r\n    () => getMajorInterval(duration),\r\n    [duration]\r\n  )\r\n\r\n  const onMouseMove = useEventCallback((e) => {\r\n    if (draggingTime) {\r\n      const px = (e.clientX - bounds.left) / bounds.width\r\n      changeInstantCurrentTime(\r\n        Math.min(duration, Math.max(0, Math.floor(px * duration)))\r\n      )\r\n    }\r\n  })\r\n\r\n  const onMouseUp = useEventCallback((e) => {\r\n    changeDraggingTime(false)\r\n    const px = (e.clientX - bounds.left) / bounds.width\r\n    const newTime = Math.min(duration, Math.max(0, Math.floor(px * duration)))\r\n    changeInstantCurrentTime(newTime)\r\n    onChangeCurrentTime(newTime)\r\n  })\r\n\r\n  // TODO skeleton\r\n  if (!duration) return null\r\n\r\n  return (\r\n    <Container onMouseMove={onMouseMove} onMouseUp={onMouseUp} ref={ref}>\r\n      {range(0, duration, majorInterval).map((a) => (\r\n        <>\r\n          <Tick\r\n            key={a}\r\n            style={{ left: (a / duration) * bounds.width, height: \"50%\" }}\r\n          />\r\n          <TickText\r\n            style={{\r\n              left: (a / duration) * bounds.width + 8,\r\n              bottom: \"calc(50% - 12px)\",\r\n            }}\r\n          >\r\n            {getTimeString(a)}\r\n          </TickText>\r\n        </>\r\n      ))}\r\n      {range(0, duration, minorInterval)\r\n        .filter((a) => !Number.isInteger(a / majorInterval))\r\n        .map((a) => (\r\n          <Tick\r\n            key={a}\r\n            style={{\r\n              left: (a / duration) * bounds.width,\r\n              height: \"25%\",\r\n            }}\r\n          />\r\n        ))}\r\n      {keyframeTimes.map((kt) => (\r\n        <KeyframeMarker\r\n          onClick={() => onChangeCurrentTime(kt)}\r\n          key={kt}\r\n          style={{ left: (kt / duration) * bounds.width }}\r\n        />\r\n      ))}\r\n      <PositionCursor\r\n        onMouseDown={(e) => changeDraggingTime(true)}\r\n        style={{\r\n          cursor: draggingTime ? \"grabbing\" : \"grab\",\r\n          left: (instantCurrentTime / duration) * bounds.width,\r\n        }}\r\n      >\r\n        {getTimeString(instantCurrentTime)}\r\n      </PositionCursor>\r\n    </Container>\r\n  )\r\n}\r\n","/home/appwrk/Projects/react-annotator/src/Annotator/src/VideoOrImageCanvasBackground/index.js",["268","269","270","271","272"],"// @flow weak\n\nimport React, { useRef, useEffect, useMemo, useState } from \"react\"\nimport { styled } from \"@material-ui/core/styles\"\nimport useEventCallback from \"use-event-callback\"\nimport { useSettings } from \"../SettingsProvider\"\nimport LoadingOverlay from 'react-loading-overlay';\nimport PuffLoader from 'react-spinners/PuffLoader';\n\nconst Video = styled(\"video\")({\n  zIndex: 0,\n  position: \"absolute\",\n})\n\nconst StyledImage = styled(\"img\")({\n  zIndex: 0,\n  position: \"absolute\",\n})\n\nconst Error = styled(\"div\")({\n  zIndex: 0,\n  position: \"absolute\",\n  left: 0,\n  right: 0,\n  bottom: 0,\n  top: 0,\n  backgroundColor: \"rgba(255,0,0,0.2)\",\n  color: \"#ff0000\",\n  fontWeight: \"bold\",\n  whiteSpace: \"pre-wrap\",\n  padding: 50,\n})\n\nexport default ({\n  imagePosition,\n  mouseEvents,\n  videoTime,\n  activeImage,\n  videoSrc,\n  imageSrc,\n  onLoad,\n  useCrossOrigin = false,\n  videoPlaying,\n  onChangeVideoTime,\n  onChangeVideoPlaying,\n}) => {\n  const settings = useSettings()\n  const videoRef = useRef()\n  const imageRef = useRef()\n  const [error, setError] = useState()\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    if (!videoPlaying && videoRef.current) {\n      videoRef.current.currentTime = (videoTime || 0) / 1000\n    }\n  }, [videoTime])\n  useEffect(() => {\n    let renderLoopRunning = false\n    if (videoRef.current) {\n      if (videoPlaying) {\n        videoRef.current.play()\n        renderLoopRunning = true\n        if (settings.videoPlaybackSpeed) {\n          videoRef.current.playbackRate = parseFloat(\n            settings.videoPlaybackSpeed\n          )\n        }\n      } else {\n        videoRef.current.pause()\n      }\n    }\n\n    function checkForNewFrame() {\n      if (!renderLoopRunning) return\n      if (!videoRef.current) return\n      const newVideoTime = Math.floor(videoRef.current.currentTime * 1000)\n      if (videoTime !== newVideoTime) {\n        onChangeVideoTime(newVideoTime)\n      }\n      if (videoRef.current.paused) {\n        renderLoopRunning = false\n        onChangeVideoPlaying(false)\n      }\n      requestAnimationFrame(checkForNewFrame)\n    }\n    checkForNewFrame()\n\n    return () => {\n      renderLoopRunning = false\n    }\n  }, [videoPlaying])\n\n  const onLoadedVideoMetadata = useEventCallback((event) => {\n    const videoElm = event.currentTarget\n    videoElm.currentTime = (videoTime || 0) / 1000\n    if (onLoad)\n      onLoad({\n        naturalWidth: videoElm.videoWidth,\n        naturalHeight: videoElm.videoHeight,\n        videoElm: videoElm,\n        duration: videoElm.duration,\n      })\n  })\n  const onImageLoaded = useEventCallback((event) => {\n    setLoading(false);\n    const imageElm = event.currentTarget\n    // debugger;\n    if (onLoad)\n      onLoad({\n        naturalWidth: imageElm.naturalWidth,\n        naturalHeight: imageElm.naturalHeight,\n        imageElm,\n      })\n  })\n  const onImageError = useEventCallback((event) => {\n    setLoading(false);\n    setError(\n      `Could not load image\\n\\nMake sure your image works by visiting ${\n        imageSrc || videoSrc\n      } in a web browser. If that URL works, the server hosting the URL may be not allowing you to access the image from your current domain. Adjust server settings to enable the image to be viewed.${\n        !useCrossOrigin\n          ? \"\"\n          : `\\n\\nYour image may be blocked because it's not being sent with CORs headers. To do pixel segmentation, browser web security requires CORs headers in order for the algorithm to read the pixel data from the image. CORs headers are easy to add if you're using an S3 bucket or own the server hosting your images.`\n      }\\n\\n If you need a hand, reach out to the community at universaldatatool.slack.com`\n    )\n  })\n\n  const stylePosition = useMemo(() => {\n\n    let width = imagePosition.bottomRight.x - imagePosition.topLeft.x\n    let height = imagePosition.bottomRight.y - imagePosition.topLeft.y\n    return {\n      imageRendering: \"pixelated\",\n      left: imagePosition.topLeft.x,\n      top: imagePosition.topLeft.y,\n      width: isNaN(width) ? 0 : width,\n      height: isNaN(height) ? 0 : height,\n    }\n  }, [\n    imagePosition.topLeft.x,\n    imagePosition.topLeft.y,\n    imagePosition.bottomRight.x,\n      imagePosition.bottomRight.y,\n      activeImage.filter\n  ])\n  const filter = activeImage.filter;\n\n\n\n  if (!videoSrc && !imageSrc)\n    return <Error>No imageSrc or videoSrc provided</Error>\n  \n  if (error) return <Error>{error}</Error>\n\n  return imageSrc && videoTime === undefined ? (\n    <div>\n      <LoadingOverlay\n          className=\"loadingOverlay\"\n\t\t\t\tactive={activeImage.loading === false ? false:true}\n        styles={{\n\t\t\t\t\t\t\t\toverlay: (base) => ({\n\t\t\t\t\t\t\t\t\t...base,\n\t\t\t\t\t\t\t\t\tbackground: 'rgba(238, 226, 226, 0.5)',\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tspinner={<PuffLoader color='red'  />}\n\t\t\t\t\t\t>\n\t\t\t\t</LoadingOverlay>\n    <StyledImage\n      {...mouseEvents}\n      src={imageSrc}\n      ref={imageRef}\n      style={{\n        ...stylePosition, filter: filter ? `contrast(${filter['contrast'] || 1}) brightness(${filter[\"brightness\"] || 100}%) invert(${filter['inverse'] || 0})` :''\n      }}\n      onLoad={onImageLoaded}\n      onError={onImageError}\n      crossOrigin={useCrossOrigin ? \"anonymous\" : undefined}\n      />\n    </div>\n      \n  ) : (\n    <Video\n      {...mouseEvents}\n      ref={videoRef}\n      style={stylePosition}\n      onLoadedMetadata={onLoadedVideoMetadata}\n      src={videoSrc || imageSrc}\n    />\n  )\n}\n","/home/appwrk/Projects/react-annotator/src/Annotator/src/Annotator/reducers/video-reducer.js",["273","274","275","276"],"/home/appwrk/Projects/react-annotator/src/Annotator/src/RegionSelectorSidebarBox/styles.js",["277","278","279"],"/home/appwrk/Projects/react-annotator/src/components/images.js",[],"/home/appwrk/Projects/react-annotator/src/Annotator/src/TagsSidebarBox/index.js",["280"],"/home/appwrk/Projects/react-annotator/src/Annotator/src/RegionShapes/index.js",["281","282"],{"ruleId":"283","replacedBy":"284"},{"ruleId":"285","replacedBy":"286"},{"ruleId":"287","severity":1,"message":"288","line":3,"column":29,"nodeType":"289","messageId":"290","endLine":3,"endColumn":38},{"ruleId":"287","severity":1,"message":"291","line":7,"column":3,"nodeType":"289","messageId":"290","endLine":7,"endColumn":11},{"ruleId":"287","severity":1,"message":"292","line":9,"column":3,"nodeType":"289","messageId":"290","endLine":9,"endColumn":7},{"ruleId":"283","replacedBy":"293"},{"ruleId":"285","replacedBy":"294"},{"ruleId":"295","severity":1,"message":"296","line":155,"column":1,"nodeType":"297","endLine":162,"endColumn":2},{"ruleId":"287","severity":1,"message":"298","line":7,"column":10,"nodeType":"289","messageId":"290","endLine":7,"endColumn":14},{"ruleId":"287","severity":1,"message":"299","line":8,"column":8,"nodeType":"289","messageId":"290","endLine":8,"endColumn":12},{"ruleId":"287","severity":1,"message":"300","line":9,"column":8,"nodeType":"289","messageId":"290","endLine":9,"endColumn":16},{"ruleId":"287","severity":1,"message":"301","line":11,"column":8,"nodeType":"289","messageId":"290","endLine":11,"endColumn":14},{"ruleId":"287","severity":1,"message":"302","line":20,"column":9,"nodeType":"289","messageId":"290","endLine":20,"endColumn":16},{"ruleId":"303","severity":1,"message":"304","line":55,"column":5,"nodeType":"305","endLine":55,"endColumn":7,"suggestions":"306"},{"ruleId":"287","severity":1,"message":"307","line":59,"column":25,"nodeType":"289","messageId":"290","endLine":59,"endColumn":33},{"ruleId":"303","severity":1,"message":"308","line":91,"column":6,"nodeType":"305","endLine":91,"endColumn":8,"suggestions":"309"},{"ruleId":"295","severity":1,"message":"296","line":8,"column":1,"nodeType":"297","endLine":170,"endColumn":2},{"ruleId":"287","severity":1,"message":"310","line":2,"column":8,"nodeType":"289","messageId":"290","endLine":2,"endColumn":18},{"ruleId":"287","severity":1,"message":"311","line":3,"column":8,"nodeType":"289","messageId":"290","endLine":3,"endColumn":18},{"ruleId":"287","severity":1,"message":"312","line":4,"column":8,"nodeType":"289","messageId":"290","endLine":4,"endColumn":20},{"ruleId":"287","severity":1,"message":"298","line":5,"column":10,"nodeType":"289","messageId":"290","endLine":5,"endColumn":14},{"ruleId":"287","severity":1,"message":"313","line":7,"column":8,"nodeType":"289","messageId":"290","endLine":7,"endColumn":18},{"ruleId":"287","severity":1,"message":"314","line":10,"column":8,"nodeType":"289","messageId":"290","endLine":10,"endColumn":20},{"ruleId":"287","severity":1,"message":"315","line":11,"column":8,"nodeType":"289","messageId":"290","endLine":11,"endColumn":17},{"ruleId":"287","severity":1,"message":"316","line":22,"column":7,"nodeType":"289","messageId":"290","endLine":22,"endColumn":13},{"ruleId":"287","severity":1,"message":"317","line":49,"column":10,"nodeType":"289","messageId":"290","endLine":49,"endColumn":19},{"ruleId":"287","severity":1,"message":"318","line":89,"column":7,"nodeType":"289","messageId":"290","endLine":89,"endColumn":20},{"ruleId":"287","severity":1,"message":"319","line":193,"column":7,"nodeType":"289","messageId":"290","endLine":193,"endColumn":14},{"ruleId":"287","severity":1,"message":"320","line":216,"column":20,"nodeType":"289","messageId":"290","endLine":216,"endColumn":34},{"ruleId":"287","severity":1,"message":"321","line":229,"column":9,"nodeType":"289","messageId":"290","endLine":229,"endColumn":23},{"ruleId":"287","severity":1,"message":"322","line":3,"column":47,"nodeType":"289","messageId":"290","endLine":3,"endColumn":53},{"ruleId":"287","severity":1,"message":"323","line":4,"column":10,"nodeType":"289","messageId":"290","endLine":4,"endColumn":19},{"ruleId":"303","severity":1,"message":"324","line":72,"column":6,"nodeType":"305","endLine":72,"endColumn":16,"suggestions":"325"},{"ruleId":"287","severity":1,"message":"310","line":2,"column":8,"nodeType":"289","messageId":"290","endLine":2,"endColumn":18},{"ruleId":"287","severity":1,"message":"311","line":3,"column":8,"nodeType":"289","messageId":"290","endLine":3,"endColumn":18},{"ruleId":"287","severity":1,"message":"312","line":4,"column":8,"nodeType":"289","messageId":"290","endLine":4,"endColumn":20},{"ruleId":"287","severity":1,"message":"298","line":5,"column":10,"nodeType":"289","messageId":"290","endLine":5,"endColumn":14},{"ruleId":"287","severity":1,"message":"313","line":7,"column":8,"nodeType":"289","messageId":"290","endLine":7,"endColumn":18},{"ruleId":"287","severity":1,"message":"314","line":10,"column":8,"nodeType":"289","messageId":"290","endLine":10,"endColumn":20},{"ruleId":"287","severity":1,"message":"316","line":20,"column":7,"nodeType":"289","messageId":"290","endLine":20,"endColumn":13},{"ruleId":"287","severity":1,"message":"317","line":48,"column":10,"nodeType":"289","messageId":"290","endLine":48,"endColumn":19},{"ruleId":"287","severity":1,"message":"318","line":92,"column":7,"nodeType":"289","messageId":"290","endLine":92,"endColumn":20},{"ruleId":"287","severity":1,"message":"326","line":180,"column":7,"nodeType":"289","messageId":"290","endLine":180,"endColumn":16},{"ruleId":"287","severity":1,"message":"327","line":196,"column":7,"nodeType":"289","messageId":"290","endLine":196,"endColumn":25},{"ruleId":"287","severity":1,"message":"319","line":205,"column":7,"nodeType":"289","messageId":"290","endLine":205,"endColumn":14},{"ruleId":"287","severity":1,"message":"320","line":228,"column":20,"nodeType":"289","messageId":"290","endLine":228,"endColumn":34},{"ruleId":"287","severity":1,"message":"321","line":241,"column":9,"nodeType":"289","messageId":"290","endLine":241,"endColumn":23},{"ruleId":"328","severity":1,"message":"329","line":249,"column":13,"nodeType":"330","messageId":"331","endLine":249,"endColumn":48},{"ruleId":"287","severity":1,"message":"332","line":4,"column":27,"nodeType":"289","messageId":"290","endLine":4,"endColumn":36},{"ruleId":"295","severity":1,"message":"296","line":24,"column":1,"nodeType":"297","endLine":60,"endColumn":2},{"ruleId":"283","replacedBy":"333"},{"ruleId":"285","replacedBy":"334"},{"ruleId":"295","severity":1,"message":"296","line":3,"column":1,"nodeType":"297","endLine":6,"endColumn":2},{"ruleId":"295","severity":1,"message":"296","line":4,"column":1,"nodeType":"297","endLine":50,"endColumn":2},{"ruleId":"303","severity":1,"message":"335","line":49,"column":6,"nodeType":"305","endLine":49,"endColumn":16,"suggestions":"336"},{"ruleId":"283","replacedBy":"337"},{"ruleId":"285","replacedBy":"338"},{"ruleId":"287","severity":1,"message":"339","line":2,"column":10,"nodeType":"289","messageId":"290","endLine":2,"endColumn":20},{"ruleId":"287","severity":1,"message":"340","line":3,"column":8,"nodeType":"289","messageId":"290","endLine":3,"endColumn":14},{"ruleId":"341","severity":1,"message":"342","line":15,"column":19,"nodeType":"343","messageId":"344","endLine":15,"endColumn":21},{"ruleId":"341","severity":1,"message":"342","line":18,"column":19,"nodeType":"343","messageId":"344","endLine":18,"endColumn":21},{"ruleId":"341","severity":1,"message":"342","line":23,"column":19,"nodeType":"343","messageId":"344","endLine":23,"endColumn":21},{"ruleId":"341","severity":1,"message":"342","line":26,"column":19,"nodeType":"343","messageId":"344","endLine":26,"endColumn":21},{"ruleId":"341","severity":1,"message":"342","line":31,"column":19,"nodeType":"343","messageId":"344","endLine":31,"endColumn":21},{"ruleId":"341","severity":1,"message":"342","line":34,"column":19,"nodeType":"343","messageId":"344","endLine":34,"endColumn":21},{"ruleId":"295","severity":1,"message":"345","line":5,"column":1,"nodeType":"297","endLine":47,"endColumn":2},{"ruleId":"295","severity":1,"message":"296","line":10,"column":1,"nodeType":"297","endLine":24,"endColumn":2},{"ruleId":"287","severity":1,"message":"346","line":11,"column":30,"nodeType":"289","messageId":"290","endLine":11,"endColumn":47},{"ruleId":"287","severity":1,"message":"347","line":11,"column":49,"nodeType":"289","messageId":"290","endLine":11,"endColumn":60},{"ruleId":"348","severity":1,"message":"349","line":15,"column":3,"nodeType":"350","messageId":"351","endLine":22,"endColumn":4},{"ruleId":"283","replacedBy":"352"},{"ruleId":"285","replacedBy":"353"},{"ruleId":"287","severity":1,"message":"354","line":3,"column":17,"nodeType":"289","messageId":"290","endLine":3,"endColumn":25},{"ruleId":"287","severity":1,"message":"355","line":16,"column":8,"nodeType":"289","messageId":"290","endLine":16,"endColumn":11},{"ruleId":"287","severity":1,"message":"356","line":37,"column":15,"nodeType":"289","messageId":"290","endLine":37,"endColumn":17},{"ruleId":"287","severity":1,"message":"357","line":37,"column":19,"nodeType":"289","messageId":"290","endLine":37,"endColumn":21},{"ruleId":"287","severity":1,"message":"358","line":2,"column":32,"nodeType":"289","messageId":"290","endLine":2,"endColumn":38},{"ruleId":"287","severity":1,"message":"359","line":4,"column":34,"nodeType":"289","messageId":"290","endLine":4,"endColumn":42},{"ruleId":"287","severity":1,"message":"360","line":5,"column":8,"nodeType":"289","messageId":"290","endLine":5,"endColumn":14},{"ruleId":"287","severity":1,"message":"361","line":87,"column":9,"nodeType":"289","messageId":"290","endLine":87,"endColumn":24},{"ruleId":"287","severity":1,"message":"362","line":112,"column":11,"nodeType":"289","messageId":"290","endLine":112,"endColumn":14},{"ruleId":"287","severity":1,"message":"363","line":164,"column":13,"nodeType":"289","messageId":"290","endLine":164,"endColumn":23},{"ruleId":"287","severity":1,"message":"364","line":320,"column":15,"nodeType":"289","messageId":"290","endLine":320,"endColumn":26},{"ruleId":"365","severity":1,"message":"366","line":494,"column":11,"nodeType":"367","messageId":"368","endLine":494,"endColumn":23},{"ruleId":"287","severity":1,"message":"364","line":501,"column":19,"nodeType":"289","messageId":"290","endLine":501,"endColumn":30},{"ruleId":"287","severity":1,"message":"369","line":678,"column":50,"nodeType":"289","messageId":"290","endLine":678,"endColumn":61},{"ruleId":"370","severity":1,"message":"371","line":742,"column":9,"nodeType":"372","messageId":"373","endLine":742,"endColumn":28},{"ruleId":"287","severity":1,"message":"374","line":767,"column":13,"nodeType":"289","messageId":"290","endLine":767,"endColumn":23},{"ruleId":"287","severity":1,"message":"375","line":809,"column":15,"nodeType":"289","messageId":"290","endLine":809,"endColumn":21},{"ruleId":"287","severity":1,"message":"375","line":828,"column":15,"nodeType":"289","messageId":"290","endLine":828,"endColumn":21},{"ruleId":"365","severity":1,"message":"366","line":1022,"column":7,"nodeType":"376","messageId":"368","endLine":1022,"endColumn":13},{"ruleId":"341","severity":1,"message":"342","line":1058,"column":44,"nodeType":"343","messageId":"344","endLine":1058,"endColumn":46},{"ruleId":"295","severity":1,"message":"296","line":1,"column":1,"nodeType":"297","endLine":6,"endColumn":2},{"ruleId":"283","replacedBy":"377"},{"ruleId":"285","replacedBy":"378"},{"ruleId":"283","replacedBy":"379"},{"ruleId":"285","replacedBy":"380"},{"ruleId":"287","severity":1,"message":"381","line":5,"column":10,"nodeType":"289","messageId":"290","endLine":5,"endColumn":15},{"ruleId":"287","severity":1,"message":"382","line":5,"column":29,"nodeType":"289","messageId":"290","endLine":5,"endColumn":38},{"ruleId":"287","severity":1,"message":"383","line":19,"column":3,"nodeType":"289","messageId":"290","endLine":19,"endColumn":22},{"ruleId":"287","severity":1,"message":"384","line":30,"column":8,"nodeType":"289","messageId":"290","endLine":30,"endColumn":18},{"ruleId":"287","severity":1,"message":"385","line":152,"column":10,"nodeType":"289","messageId":"290","endLine":152,"endColumn":26},{"ruleId":"287","severity":1,"message":"386","line":152,"column":28,"nodeType":"289","messageId":"290","endLine":152,"endColumn":50},{"ruleId":"287","severity":1,"message":"387","line":156,"column":9,"nodeType":"289","messageId":"290","endLine":156,"endColumn":19},{"ruleId":"287","severity":1,"message":"388","line":162,"column":38,"nodeType":"289","messageId":"290","endLine":162,"endColumn":44},{"ruleId":"303","severity":1,"message":"389","line":181,"column":49,"nodeType":"305","endLine":181,"endColumn":61,"suggestions":"390"},{"ruleId":"287","severity":1,"message":"391","line":183,"column":9,"nodeType":"289","messageId":"290","endLine":183,"endColumn":22},{"ruleId":"287","severity":1,"message":"392","line":248,"column":13,"nodeType":"289","messageId":"290","endLine":248,"endColumn":24},{"ruleId":"287","severity":1,"message":"393","line":248,"column":26,"nodeType":"289","messageId":"290","endLine":248,"endColumn":38},{"ruleId":"394","severity":1,"message":"395","line":83,"column":3,"nodeType":"396","messageId":"344","endLine":83,"endColumn":13},{"ruleId":"295","severity":1,"message":"296","line":126,"column":1,"nodeType":"297","endLine":218,"endColumn":2},{"ruleId":"303","severity":1,"message":"397","line":144,"column":6,"nodeType":"305","endLine":144,"endColumn":19,"suggestions":"398"},{"ruleId":"295","severity":1,"message":"296","line":34,"column":1,"nodeType":"297","endLine":191,"endColumn":2},{"ruleId":"287","severity":1,"message":"399","line":51,"column":10,"nodeType":"289","messageId":"290","endLine":51,"endColumn":17},{"ruleId":"303","severity":1,"message":"400","line":56,"column":6,"nodeType":"305","endLine":56,"endColumn":17,"suggestions":"401"},{"ruleId":"303","severity":1,"message":"402","line":91,"column":6,"nodeType":"305","endLine":91,"endColumn":20,"suggestions":"403"},{"ruleId":"303","severity":1,"message":"404","line":139,"column":6,"nodeType":"305","endLine":145,"endColumn":4,"suggestions":"405"},{"ruleId":"295","severity":1,"message":"296","line":11,"column":1,"nodeType":"297","endLine":83,"endColumn":2},{"ruleId":"370","severity":1,"message":"371","line":32,"column":5,"nodeType":"372","messageId":"373","endLine":39,"endColumn":6},{"ruleId":"348","severity":1,"message":"349","line":33,"column":7,"nodeType":"350","messageId":"351","endLine":38,"endColumn":8},{"ruleId":"370","severity":1,"message":"371","line":40,"column":5,"nodeType":"372","messageId":"373","endLine":42,"endColumn":6},{"ruleId":"287","severity":1,"message":"406","line":1,"column":22,"nodeType":"289","messageId":"290","endLine":1,"endColumn":28},{"ruleId":"287","severity":1,"message":"407","line":1,"column":30,"nodeType":"289","messageId":"290","endLine":1,"endColumn":36},{"ruleId":"295","severity":1,"message":"345","line":3,"column":1,"nodeType":"297","endLine":54,"endColumn":2},{"ruleId":"287","severity":1,"message":"408","line":12,"column":7,"nodeType":"289","messageId":"290","endLine":12,"endColumn":16},{"ruleId":"287","severity":1,"message":"409","line":36,"column":11,"nodeType":"289","messageId":"290","endLine":36,"endColumn":20},{"ruleId":"303","severity":1,"message":"410","line":206,"column":5,"nodeType":"305","endLine":206,"endColumn":14,"suggestions":"411"},"no-native-reassign",["412"],"no-negated-in-lhs",["413"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'ToolEnum' is defined but never used.","'Mode' is defined but never used.",["412"],["413"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'grey' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'Avatar' is defined but never used.","'classes' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useLayoutEffect has missing dependencies: 'history', 'images', 'jobName', 'onSelect', and 'pathname'. Either include them or remove the dependency array. If 'onSelect' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["414"],"'pathname' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history', 'images', 'jobName', and 'onSelect'. Either include them or remove the dependency array. If 'onSelect' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["415"],"'ButtonBase' is defined but never used.","'ExpandIcon' is defined but never used.","'ContractIcon' is defined but never used.","'RegionIcon' is defined but never used.","'PieChartIcon' is defined but never used.","'TrashIcon' is defined but never used.","'colors' is assigned a value but never used.","'mouseOver' is assigned a value but never used.","'MemoRowHeader' is assigned a value but never used.","'MemoRow' is assigned a value but never used.","'toggleExpanded' is assigned a value but never used.","'containerStyle' is assigned a value but never used.","'useRef' is defined but never used.","'colorInts' is defined but never used.","React Hook useEffect has missing dependencies: 'autoSegmentationOptions' and 'regionClsList'. Either include them or remove the dependency array.",["416"],"'Container' is assigned a value but never used.","'InnerSliderContent' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'asMutable' is defined but never used.",["412"],["413"],"React Hook useEffect has missing dependencies: 'changeMat' and 'getLatestMat'. Either include them or remove the dependency array. If 'getLatestMat' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["417"],["412"],["413"],"'withStyles' is defined but never used.","'Slider' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Assign object to a variable before exporting as module default","'pathToActiveImage' is assigned a value but never used.","'activeImage' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["412"],["413"],"'setState' is defined but never used.","'Box' is defined but never used.","'iw' is assigned a value but never used.","'ih' is assigned a value but never used.","'Action' is defined but never used.","'updateIn' is defined but never used.","'moment' is defined but never used.","'unselectRegions' is assigned a value but never used.","'src' is assigned a value but never used.","'regionData' is assigned a value but never used.","'mouseDownAt' is assigned a value but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'connections' is assigned a value but never used.","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","'jointStart' is assigned a value but never used.","'region' is assigned a value but never used.","BreakStatement",["412"],["413"],["412"],["413"],"'Route' is defined but never used.","'useParams' is defined but never used.","'KeypointsDefinition' is defined but never used.","'RegionTags' is defined but never used.","'maskImagesLoaded' is assigned a value but never used.","'changeMaskImagesLoaded' is assigned a value but never used.","'maskImages' is assigned a value but never used.","'zoomIn' is assigned a value but never used.","React Hook useLayoutEffect has missing dependencies: 'changeMat' and 'mat'. Either include them or remove the dependency array.",["418"],"'innerMousePos' is assigned a value but never used.","'clientWidth' is assigned a value but never used.","'clientHeight' is assigned a value but never used.","no-dupe-keys","Duplicate key 'marginLeft'.","ObjectExpression","React Hook useEffect has a missing dependency: 'instantCurrentTime'. Either include it or remove the dependency array.",["419"],"'loading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'videoPlaying'. Either include it or remove the dependency array.",["420"],"React Hook useEffect has missing dependencies: 'onChangeVideoPlaying', 'onChangeVideoTime', 'settings.videoPlaybackSpeed', and 'videoTime'. Either include them or remove the dependency array. If 'onChangeVideoTime' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["421"],"React Hook useMemo has an unnecessary dependency: 'activeImage.filter'. Either exclude it or remove the dependency array.",["422"],"'orange' is defined but never used.","'purple' is defined but never used.","'useStyles' is assigned a value but never used.","'alphaBase' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'ih', 'iw', 'onRegionChange', and 'svg'. Either include them or remove the dependency array. If 'onRegionChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["423"],"no-global-assign","no-unsafe-negation",{"desc":"424","fix":"425"},{"desc":"426","fix":"427"},{"desc":"428","fix":"429"},{"desc":"430","fix":"431"},{"desc":"432","fix":"433"},{"desc":"434","fix":"435"},{"desc":"436","fix":"437"},{"desc":"438","fix":"439"},{"desc":"440","fix":"441"},{"desc":"442","fix":"443"},"Update the dependencies array to be: [history, images, jobName, onSelect, pathname]",{"range":"444","text":"445"},"Update the dependencies array to be: [history, images, jobName, onSelect]",{"range":"446","text":"447"},"Update the dependencies array to be: [autoSegmentationOptions, imageSrc, regionClsList]",{"range":"448","text":"449"},"Update the dependencies array to be: [changeMat, getLatestMat, wasdMode]",{"range":"450","text":"451"},"Update the dependencies array to be: [changeMat, mat, windowSize]",{"range":"452","text":"453"},"Update the dependencies array to be: [currentTime, instantCurrentTime]",{"range":"454","text":"455"},"Update the dependencies array to be: [videoPlaying, videoTime]",{"range":"456","text":"457"},"Update the dependencies array to be: [onChangeVideoPlaying, onChangeVideoTime, settings.videoPlaybackSpeed, videoPlaying, videoTime]",{"range":"458","text":"459"},"Update the dependencies array to be: [imagePosition.topLeft.x, imagePosition.topLeft.y, imagePosition.bottomRight.x, imagePosition.bottomRight.y]",{"range":"460","text":"461"},"Update the dependencies array to be: [ih, iw, onRegionChange, regions, svg]",{"range":"462","text":"463"},[1688,1690],"[history, images, jobName, onSelect, pathname]",[2738,2740],"[history, images, jobName, onSelect]",[1765,1775],"[autoSegmentationOptions, imageSrc, regionClsList]",[1416,1426],"[changeMat, getLatestMat, wasdMode]",[5265,5277],"[changeMat, mat, windowSize]",[3357,3370],"[currentTime, instantCurrentTime]",[1248,1259],"[videoPlaying, videoTime]",[2179,2193],"[onChangeVideoPlaying, onChangeVideoTime, settings.videoPlaybackSpeed, videoPlaying, videoTime]",[4091,4247],"[imagePosition.topLeft.x, imagePosition.topLeft.y, imagePosition.bottomRight.x, imagePosition.bottomRight.y]",[6153,6162],"[ih, iw, onRegionChange, regions, svg]"]